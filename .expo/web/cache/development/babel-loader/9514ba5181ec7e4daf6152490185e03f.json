{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport moment from \"moment\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport ButtonsRow from \"../utills/components/ButtonsRow\";\nimport ButtonClick from \"../utills/components/ButtonClick\";\nimport DisplayDateClock from \"./components/DisplayDateClock\";\nimport ModalInput from \"../utills/components/ModalInput\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar clockOffset;\n\nvar _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    dateOffset = _useState2[0],\n    setdateOffset = _useState2[1];\n\nvar AppWatch = function AppWatch() {\n  var clockNow = new Date();\n\n  var _useState3 = useState('24H'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fotmetWatch = _useState4[0],\n      setfotmetWatch = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      clock = _useState6[0],\n      setclock = _useState6[1];\n\n  var _useState7 = useState('en-US'),\n      _useState8 = _slicedToArray(_useState7, 2),\n      clockFormat = _useState8[0],\n      setclockFormat = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      modalOpen = _useState10[0],\n      setmodalOpen = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      modalFormat = _useState12[0],\n      setmodalFormat = _useState12[1];\n\n  var retrieveData = function retrieveData() {\n    var _clock, date;\n\n    return _regeneratorRuntime.async(function retrieveData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('clockOffset'));\n\n          case 3:\n            _clock = _context.sent;\n\n            if (_clock !== null) {\n              setclockOffset(parseInt(_clock));\n            }\n\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('dateOffset'));\n\n          case 7:\n            date = _context.sent;\n\n            if (date !== null) {\n              setdateOffset(parseInt(date));\n            }\n\n            console.log(\"galdebug\");\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  };\n\n  retrieveData();\n\n  var storeData = function storeData() {\n    return _regeneratorRuntime.async(function storeData$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('clockOffset', clockOffset));\n\n          case 3:\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('dateOffset', dateOffset));\n\n          case 5:\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  useEffect(function () {\n    var interval = setInterval(function () {\n      setclock(clockNow.toLocaleTimeString());\n    }, 1000);\n    return function () {\n      clearInterval(interval);\n    };\n  });\n\n  var set = function set() {\n    if (modalOpen == false) {\n      setmodalOpen(true);\n    } else {\n      setmodalOpen(false);\n    }\n  };\n\n  var save = function save(values) {\n    var userTimeInSeconds = parseInt(values.hours) * 60 * 60 + parseInt(values.minute) * 60 + parseInt(values.second);\n    var currTimeInSeconds = clockNow.getHours() * 60 * 60 + clockNow.getMinutes() * 60 + clockNow.getSeconds();\n    console.log(values.date);\n    setclockOffset((userTimeInSeconds - currTimeInSeconds) * 1000);\n    setdateOffset(new Date(values.date).getTime() + userTimeInSeconds * 1000 - clockNow.getTime());\n    storeData();\n  };\n\n  var pormatWatch = function pormatWatch() {\n    if (clockFormat == 'fr-FR') {\n      setclockFormat('en-US');\n    } else {\n      setclockFormat('fr-FR');\n    }\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(DisplayDateClock, {\n      clock: new Date(clockNow.getTime() + clockOffset).toLocaleTimeString(clockFormat),\n      date: moment(new Date(new Date().getTime() + dateOffset)).format('DD/MM/YYYY'),\n      fontSize: 45\n    }), fotmetWatch == 'AM/PM' && _jsxs(ButtonsRow, {\n      children: [_jsx(ButtonClick, {\n        title: \"Set\",\n        background: \"#5F9EA0\",\n        onPress: set,\n        fontSize: 22\n      }), _jsx(ButtonClick, {\n        title: \"AM/PM\",\n        background: \"#5F9EA0\",\n        onPress: pormatWatch,\n        fontSize: 15\n      })]\n    }), fotmetWatch == '24H' && _jsxs(ButtonsRow, {\n      children: [_jsx(ButtonClick, {\n        title: \"Set\",\n        background: \"#5F9EA0\",\n        onPress: set,\n        fontSize: 22\n      }), _jsx(ButtonClick, {\n        title: \"24H\",\n        background: \"#B0E0E6\",\n        onPress: pormatWatch,\n        fontSize: 25\n      })]\n    }), _jsx(ModalInput, {\n      modalOpen: modalOpen,\n      set: set,\n      save: save,\n      modalFormat: modalFormat\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'black',\n    alignItems: 'center',\n    paddingTop: 100,\n    paddingHorizontal: 20\n  }\n});\nexport default AppWatch;","map":{"version":3,"sources":["C:/Users/micha/Desktop/react netive/project/watch/AppWatch.jsx"],"names":["React","useState","useEffect","moment","AsyncStorage","ButtonsRow","ButtonClick","DisplayDateClock","ModalInput","clockOffset","dateOffset","setdateOffset","AppWatch","clockNow","Date","fotmetWatch","setfotmetWatch","clock","setclock","clockFormat","setclockFormat","modalOpen","setmodalOpen","modalFormat","setmodalFormat","retrieveData","getItem","setclockOffset","parseInt","date","console","log","storeData","setItem","interval","setInterval","toLocaleTimeString","clearInterval","set","save","values","userTimeInSeconds","hours","minute","second","currTimeInSeconds","getHours","getMinutes","getSeconds","getTime","pormatWatch","styles","container","format","StyleSheet","create","flex","backgroundColor","alignItems","paddingTop","paddingHorizontal"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { StyleSheet, View} from 'react-native';\r\nimport moment from \"moment\";\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nimport ButtonsRow from '../utills/components/ButtonsRow'\r\nimport ButtonClick from '../utills/components/ButtonClick'\r\nimport DisplayDateClock from './components/DisplayDateClock'\r\nimport ModalInput from '../utills/components/ModalInput';\r\n\r\nlet clockOffset\r\nconst [dateOffset,setdateOffset]=useState(0)\r\n\r\n const AppWatch = ()=> {\r\n   const clockNow=new Date()\r\n   \r\n    const [fotmetWatch,setfotmetWatch]= useState('24H')\r\n\r\n    const [clock,setclock]=useState()\r\n    const [clockFormat,setclockFormat]=useState('en-US')\r\n\r\n\r\n    // Modal\r\n    const [modalOpen,setmodalOpen]=useState(false)\r\n    const [modalFormat, setmodalFormat] = useState(false)\r\n\r\n    const retrieveData = async () => {\r\n      try {\r\n        const clock = await AsyncStorage.getItem('clockOffset');\r\n        if (clock !== null) {\r\n          setclockOffset(parseInt(clock))\r\n        }\r\n        const date = await AsyncStorage.getItem('dateOffset');\r\n        if (date !== null) {\r\n          setdateOffset(parseInt(date))\r\n        }\r\n        console.log(\"galdebug\")\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    };\r\n\r\n    retrieveData()\r\n\r\n    const storeData = async () => {\r\n      try {\r\n        await AsyncStorage.setItem(\r\n          'clockOffset',\r\n          clockOffset\r\n        );\r\n        await AsyncStorage.setItem(\r\n          'dateOffset',\r\n          dateOffset\r\n        );\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n    };\r\n\r\n    useEffect(()=>{\r\n        const interval =setInterval(()=>{\r\n          setclock(clockNow.toLocaleTimeString())\r\n        },1000)\r\n\r\n        return ()=>{\r\n          clearInterval(interval)\r\n        }\r\n    })\r\n\r\n  // Functions for the buttons\r\n    const set = ()=>{\r\n      if(modalOpen == false){\r\n        setmodalOpen(true)\r\n      }else{\r\n        setmodalOpen(false)\r\n      }\r\n    }\r\n\r\n    const save=(values)=>{\r\n      let userTimeInSeconds = parseInt(values.hours) * 60 * 60 +\r\n         parseInt(values.minute) * 60 +\r\n         parseInt(values.second)\r\n      \r\n      let currTimeInSeconds = \r\n        clockNow.getHours() * 60 * 60 +\r\n        clockNow.getMinutes() * 60 +\r\n        clockNow.getSeconds()\r\n      console.log(values.date)\r\n      setclockOffset((userTimeInSeconds - currTimeInSeconds) * 1000)\r\n      setdateOffset(new Date(values.date).getTime() + userTimeInSeconds * 1000 - clockNow.getTime())\r\n      storeData()\r\n    }\r\n\r\n    const pormatWatch = ()=>{\r\n      if (clockFormat == 'fr-FR') {\r\n        setclockFormat('en-US')\r\n      } else {\r\n        setclockFormat('fr-FR')\r\n      }  \r\n    }\r\n\r\n    return (\r\n      <View style={styles.container} >\r\n\r\n        <DisplayDateClock \r\n          clock={new Date(clockNow.getTime() + clockOffset).toLocaleTimeString(clockFormat)}\r\n          date={moment(new Date(new Date().getTime() + dateOffset)).format('DD/MM/YYYY')}\r\n          fontSize={45}>\r\n        </DisplayDateClock>\r\n      \r\n        {fotmetWatch == 'AM/PM' && (<ButtonsRow>\r\n            <ButtonClick \r\n              title=\"Set\"  \r\n              background=\"#5F9EA0\"  \r\n              onPress={set} \r\n              fontSize={22}>\r\n            </ButtonClick>\r\n\r\n            <ButtonClick \r\n              title=\"AM/PM\"  \r\n              background=\"#5F9EA0\" \r\n              onPress={pormatWatch} \r\n              fontSize={15}>\r\n            </ButtonClick>\r\n        </ButtonsRow>\r\n        )}\r\n\r\n        {fotmetWatch == '24H' && (<ButtonsRow>\r\n            <ButtonClick \r\n            title=\"Set\"  \r\n            background=\"#5F9EA0\"   \r\n            onPress={set} \r\n            fontSize={22}>\r\n            </ButtonClick>\r\n\r\n            <ButtonClick \r\n            title=\"24H\"  \r\n            background=\"#B0E0E6\" \r\n            onPress={pormatWatch} \r\n            fontSize={25}>\r\n            </ButtonClick>\r\n        </ButtonsRow>\r\n        )}\r\n\r\n        <ModalInput \r\n        modalOpen={modalOpen} \r\n        set={set} save={save} \r\n        modalFormat={modalFormat}\r\n        />\r\n\r\n      </View>\r\n   );\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: 'black',\r\n        alignItems: 'center',\r\n        paddingTop: 100,\r\n        paddingHorizontal:20,\r\n      },\r\n    \r\n});\r\n\r\nexport default AppWatch\r\n"]},"metadata":{},"sourceType":"module"}