{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ModalInput from \"./components/ModalInput\";\nimport moment from \"moment\";\nimport ButtonsRow from \"../stopper/components/ButtonsRow\";\nimport ButtonClick from \"../stopper/components/ButtonClick\";\nimport DisplayDateClock from \"./components/DisplayDateClock\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar hour = new Date().getHours();\nvar minutes = new Date().getMinutes();\nvar seconds = new Date().getSeconds();\nvar am_pm = 'pm';\n\nvar AppWatch = function AppWatch() {\n  var _useState = useState('AM/PM'),\n      _useState2 = _slicedToArray(_useState, 2),\n      fotmetWatch = _useState2[0],\n      setfotmetWatch = _useState2[1];\n\n  var _useState3 = useState('fr-FR'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      clockFormat = _useState4[0],\n      setclockFormat = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      clockOffset = _useState6[0],\n      setclockOffset = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dateOffset = _useState8[0],\n      setdateOffset = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      hoursValue = _useState10[0],\n      sethoursValue = _useState10[1];\n\n  var _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 2),\n      minuteValue = _useState12[0],\n      setminuteValue = _useState12[1];\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      secondValue = _useState14[0],\n      setsecondValue = _useState14[1];\n\n  var _useState15 = useState(''),\n      _useState16 = _slicedToArray(_useState15, 2),\n      dateValue = _useState16[0],\n      setDateValue = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      modalOpen = _useState18[0],\n      setmodalOpen = _useState18[1];\n\n  var _useState19 = useState(false),\n      _useState20 = _slicedToArray(_useState19, 2),\n      modalFormat = _useState20[0],\n      setmodalFormat = _useState20[1];\n\n  var clockNow = new Date();\n  useEffect(function () {\n    var interval = setInterval(function () {}, 1000);\n    return function () {\n      clearInterval(interval);\n    };\n  });\n\n  var set = function set() {\n    if (modalOpen == false) {\n      setmodalOpen(true);\n    } else {\n      setmodalOpen(false);\n    }\n  };\n\n  var save = function save(values) {\n    var userTimeInSeconds = parseInt(values.hours) * 60 * 60 + parseInt(values.minute) * 60 + parseInt(values.second);\n    var currTimeInSeconds = clockNow.getHours() * 60 * 60 + clockNow.getMinutes() * 60 + clockNow.getSeconds();\n    console.log(values.date);\n    setclockOffset((userTimeInSeconds - currTimeInSeconds) * 1000);\n    setdateOffset(new Date(values.date).getTime() + userTimeInSeconds * 1000 - clockNow.getTime());\n  };\n\n  var pormatWatch = function pormatWatch() {\n    if (fotmetWatch == 'fr-FR') {\n      setclockFormat('en-US');\n    } else {\n      setclockFormat('fr-FR');\n    }\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(DisplayDateClock, {\n      clock: new Date(new Date().getTime() + clockOffset).toLocaleTimeString(clockFormat),\n      date: moment(new Date(new Date().getTime() + dateOffset)).format('DD/MM/YYYY'),\n      fontSize: 45\n    }), fotmetWatch == 'AM/PM' && _jsxs(ButtonsRow, {\n      children: [_jsx(ButtonClick, {\n        title: \"Set\",\n        background: \"#5F9EA0\",\n        onPress: set,\n        fontSize: 22\n      }), _jsx(ButtonClick, {\n        title: \"AM/PM\",\n        background: \"#5F9EA0\",\n        onPress: pormatWatch,\n        fontSize: 15\n      })]\n    }), fotmetWatch == '24H' && _jsxs(ButtonsRow, {\n      children: [_jsx(ButtonClick, {\n        title: \"Set\",\n        background: \"#5F9EA0\",\n        onPress: set,\n        fontSize: 22\n      }), _jsx(ButtonClick, {\n        title: \"24H\",\n        background: \"#B0E0E6\",\n        onPress: pormatWatch,\n        fontSize: 25\n      })]\n    }), _jsx(ModalInput, {\n      modalOpen: modalOpen,\n      set: set,\n      save: save,\n      modalFormat: modalFormat\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'black',\n    alignItems: 'center',\n    paddingTop: 100,\n    paddingHorizontal: 20\n  }\n});\nexport default AppWatch;","map":{"version":3,"sources":["C:/Users/micha/Desktop/react netive/project/watch/AppWatch.jsx"],"names":["React","useState","useEffect","ModalInput","moment","ButtonsRow","ButtonClick","DisplayDateClock","hour","Date","getHours","minutes","getMinutes","seconds","getSeconds","am_pm","AppWatch","fotmetWatch","setfotmetWatch","clockFormat","setclockFormat","clockOffset","setclockOffset","dateOffset","setdateOffset","hoursValue","sethoursValue","minuteValue","setminuteValue","secondValue","setsecondValue","dateValue","setDateValue","modalOpen","setmodalOpen","modalFormat","setmodalFormat","clockNow","interval","setInterval","clearInterval","set","save","values","userTimeInSeconds","parseInt","hours","minute","second","currTimeInSeconds","console","log","date","getTime","pormatWatch","styles","container","toLocaleTimeString","format","StyleSheet","create","flex","backgroundColor","alignItems","paddingTop","paddingHorizontal"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { StyleSheet, View} from 'react-native';\r\nimport ModalInput from './components/ModalInput';\r\nimport moment from \"moment\";\r\n\r\nimport ButtonsRow from '../stopper/components/ButtonsRow'\r\nimport ButtonClick from '../stopper/components/ButtonClick'\r\nimport DisplayDateClock from './components/DisplayDateClock'\r\n\r\n  let hour = new Date().getHours();\r\n  let minutes = new Date().getMinutes();\r\n  let seconds = new Date().getSeconds();\r\n  let am_pm = 'pm';\r\n\r\n const AppWatch = ()=> {\r\n    const [fotmetWatch,setfotmetWatch]= useState('AM/PM')\r\n\r\n    const [clockFormat,setclockFormat]=useState('fr-FR')\r\n    \r\n    const [clockOffset,setclockOffset]=useState(0)\r\n    const [dateOffset,setdateOffset]=useState(0)\r\n\r\n    const [hoursValue,sethoursValue]= useState('')\r\n    const [minuteValue,setminuteValue]= useState('')\r\n    const [secondValue,setsecondValue]= useState('')\r\n    const [dateValue,setDateValue]= useState('')\r\n\r\n    // Modal\r\n    const [modalOpen,setmodalOpen]=useState(false)\r\n    const [modalFormat, setmodalFormat] = useState(false)\r\n\r\n\r\n    const clockNow=new Date()\r\n\r\n    useEffect(()=>{\r\n        const interval =setInterval(()=>{\r\n\r\n        },1000)\r\n\r\n        return ()=>{\r\n          clearInterval(interval)\r\n        }\r\n    })\r\n\r\n  // Functions for the buttons\r\n    const set = ()=>{\r\n      if(modalOpen == false){\r\n        setmodalOpen(true)\r\n      }else{\r\n        setmodalOpen(false)\r\n      }\r\n    }\r\n\r\n    const save=(values)=>{\r\n      let userTimeInSeconds = parseInt(values.hours) * 60 * 60 +\r\n         parseInt(values.minute) * 60 +\r\n         parseInt(values.second)\r\n      \r\n      let currTimeInSeconds = \r\n        clockNow.getHours() * 60 * 60 +\r\n        clockNow.getMinutes() * 60 +\r\n        clockNow.getSeconds()\r\n      console.log(values.date)\r\n      setclockOffset((userTimeInSeconds - currTimeInSeconds) * 1000)\r\n      setdateOffset(new Date(values.date).getTime() + userTimeInSeconds * 1000 - clockNow.getTime())\r\n    }\r\n\r\n    const pormatWatch = ()=>{\r\n      if (fotmetWatch == 'fr-FR') {\r\n        setclockFormat('en-US')\r\n      } else {\r\n        setclockFormat('fr-FR')\r\n      }  \r\n    }\r\n\r\n    return (\r\n      <View style={styles.container} >\r\n\r\n        <DisplayDateClock \r\n        clock={(new Date(new Date().getTime() + clockOffset)).toLocaleTimeString(clockFormat)}\r\n        date={moment(new Date(new Date().getTime() + dateOffset)).format('DD/MM/YYYY')}\r\n        fontSize={45}\r\n        >\r\n        </DisplayDateClock>\r\n      \r\n        {fotmetWatch == 'AM/PM' && (<ButtonsRow>\r\n            <ButtonClick title=\"Set\"  background=\"#5F9EA0\"  onPress={set} fontSize={22}></ButtonClick>\r\n            <ButtonClick title=\"AM/PM\"  background=\"#5F9EA0\" onPress={pormatWatch} fontSize={15}></ButtonClick>\r\n        </ButtonsRow>\r\n        )}\r\n\r\n        {fotmetWatch == '24H' && (<ButtonsRow>\r\n            <ButtonClick title=\"Set\"  background=\"#5F9EA0\"   onPress={set} fontSize={22}></ButtonClick>\r\n            <ButtonClick title=\"24H\"  background=\"#B0E0E6\" onPress={pormatWatch} fontSize={25}></ButtonClick>\r\n        </ButtonsRow>\r\n        )}\r\n\r\n        <ModalInput \r\n        modalOpen={modalOpen} \r\n        set={set} save={save} \r\n        modalFormat={modalFormat}\r\n        />\r\n\r\n      </View>\r\n   );\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: 'black',\r\n        alignItems: 'center',\r\n        paddingTop: 100,\r\n        paddingHorizontal:20,\r\n      },\r\n    \r\n});\r\n\r\nexport default AppWatch\r\n\r\n"]},"metadata":{},"sourceType":"module"}