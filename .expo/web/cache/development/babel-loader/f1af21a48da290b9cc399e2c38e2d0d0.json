{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar WIDTH = Dimensions.get('window').width;\n\nfunction ButtonsRow(_ref) {\n  var children = _ref.children;\n  return _jsx(View, {\n    style: styles.buttonsRow,\n    children: children\n  });\n}\n\nfunction RoundButton(_ref2) {\n  var title = _ref2.title,\n      color = _ref2.color,\n      background = _ref2.background,\n      _onPress = _ref2.onPress,\n      disable = _ref2.disable;\n  return _jsx(TouchableOpacity, {\n    onPress: function onPress() {\n      return !disable && _onPress();\n    },\n    style: [styles.button, {\n      backgroundColor: background\n    }],\n    activeOpacity: disable ? 1.0 : 0.5,\n    children: _jsx(View, {\n      style: styles.buttonBorder,\n      children: _jsx(Text, {\n        style: [styles.buttonTitle, {\n          color: color\n        }],\n        children: title\n      })\n    })\n  });\n}\n\nvar hour = new Date().getHours();\nvar minutes = new Date().getMinutes();\nvar seconds = new Date().getSeconds();\nvar am_pm = 'pm';\n\nvar getCurrentTime = function getCurrentTime() {\n  if (minutes < 10) {\n    minutes = '0' + minutes;\n  }\n\n  if (seconds < 10) {\n    seconds = '0' + seconds;\n  }\n\n  if (hour > 12) {\n    hour = hour - 12;\n  }\n\n  if (hour == 0) {\n    hour = 12;\n  }\n\n  if (new Date().getHours() < 12) {\n    am_pm = 'am';\n  }\n};\n\nvar AppDigitalWatch = function AppDigitalWatch() {\n  var _useState = useState('AM/PM'),\n      _useState2 = _slicedToArray(_useState, 2),\n      fotmetWatch = _useState2[0],\n      setfotmetWatch = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hh = _useState4[0],\n      sethhclock = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      mm = _useState6[0],\n      setmmclock = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      ss = _useState8[0],\n      setssclock = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      date = _useState10[0],\n      setdate = _useState10[1];\n\n  var _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 2),\n      hoursValue = _useState12[0],\n      sethoursValue = _useState12[1];\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      minuteValue = _useState14[0],\n      setminuteValue = _useState14[1];\n\n  var _useState15 = useState(''),\n      _useState16 = _slicedToArray(_useState15, 2),\n      secondValue = _useState16[0],\n      setsecondValue = _useState16[1];\n\n  var _useState17 = useState(''),\n      _useState18 = _slicedToArray(_useState17, 2),\n      dateValue = _useState18[0],\n      setDateValue = _useState18[1];\n\n  var _useState19 = useState(false),\n      _useState20 = _slicedToArray(_useState19, 2),\n      modal = _useState20[0],\n      setModal = _useState20[1];\n\n  var clockNow = new Date();\n  useEffect(function () {\n    setInterval(function () {\n      getCurrentTime();\n      sethhclock(hour);\n      setmmclock(minutes);\n      setssclock(seconds);\n      setdate(clockNow.toLocaleDateString());\n    }, 1000);\n  });\n\n  var set = function set() {\n    if (modal == false) {\n      setModal(true);\n    } else {\n      setModal(false);\n    }\n  };\n\n  var chekValid = function chekValid() {\n    if (hoursValue == '') {\n      return flase;\n    } else if (minuteValue == '') {\n      return false;\n    } else if (secondValue == \"\") {\n      return false;\n    } else if (date == \"\") {\n      return false;\n    }\n\n    return true;\n  };\n\n  var save = function save() {\n    if (chekValid()) {\n      clockNow.setHours(hoursValue);\n      console.log(hoursValue);\n      clockNow.setMinutes(minuteValue);\n      console.log(minuteValue);\n      clockNow.setSeconds(secondValue);\n      console.log(secondValue);\n      console.log('good');\n    }\n  };\n\n  var pormatWatch = function pormatWatch() {\n    if (fotmetWatch == 'AM/PM') {\n      setfotmetWatch('24H');\n      setclock(clockNow.toLocaleTimeString('en-US'));\n    } else {\n      setfotmetWatch('AM/PM');\n      setclock(clockNow.toLocaleTimeString('fr-FR'));\n    }\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(Text, {\n      style: styles.data,\n      children: [\" \", clockNow.toLocaleTimeString()]\n    }), _jsx(Text, {\n      style: styles.data,\n      children: date\n    }), fotmetWatch == 'AM/PM' && _jsxs(ButtonsRow, {\n      children: [_jsx(RoundButton, {\n        title: \"Set\",\n        color: \"green\",\n        background: \"red\",\n        onPress: set\n      }), _jsx(RoundButton, {\n        title: \"AM/PM\",\n        color: \"pink\",\n        background: \"blue\",\n        onPress: pormatWatch\n      })]\n    }), fotmetWatch == '24H' && _jsxs(ButtonsRow, {\n      children: [_jsx(RoundButton, {\n        title: \"Set\",\n        color: \"green\",\n        background: \"red\",\n        onPress: set\n      }), _jsx(RoundButton, {\n        title: \"24H\",\n        color: \"pink\",\n        background: \"blue\",\n        onPress: pormatWatch\n      })]\n    }), _jsx(Modal, {\n      visible: modal,\n      animationType: 'fade',\n      style: styles.modal,\n      transparent: true,\n      children: _jsxs(View, {\n        style: styles.allSet,\n        children: [_jsx(TextInput, {\n          style: styles.clock,\n          onChange: function onChange() {\n            sethoursValue;\n          },\n          placeholder: \"HH\"\n        }), _jsx(TextInput, {\n          style: styles.clock,\n          onChange: function onChange(minute) {\n            setminuteValue(minute);\n          },\n          placeholder: \"MM\"\n        }), _jsx(TextInput, {\n          style: styles.clock,\n          onChange: function onChange(second) {\n            setsecondValue(second);\n          },\n          placeholder: \"SS\"\n        }), _jsx(TextInput, {\n          onChange: function onChange(date) {\n            setDateValue(date);\n          },\n          placeholder: \"09/01/2021\"\n        }), _jsx(Button, {\n          title: \"Save\",\n          onPress: save\n        })]\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'black',\n    alignItems: 'center',\n    paddingTop: 100,\n    paddingHorizontal: 20\n  },\n  data: {\n    color: 'white',\n    fontSize: 15,\n    fontWeight: '200',\n    width: 100\n  },\n  buttonsRow: {\n    flexDirection: 'row',\n    alignSelf: 'stretch',\n    justifyContent: 'space-between',\n    marginTop: 80,\n    marginBottom: 30\n  },\n  button: {\n    width: 80,\n    height: 80,\n    borderRadius: 40,\n    justifyContent: 'center',\n    alignContent: 'center'\n  },\n  buttonTitle: {\n    fontSize: 18\n  },\n  buttonBorder: {\n    width: 76,\n    height: 76,\n    borderRadius: 38,\n    borderWidth: 1,\n    justifyContent: 'center',\n    alignContent: 'center'\n  },\n  modal: {\n    height: 150,\n    width: WIDTH - 80,\n    paddingTop: 10,\n    backgroundColor: 'red',\n    borderRadius: 10\n  }\n});\nexport default AppDigitalWatch;","map":{"version":3,"sources":["C:/Users/micha/Desktop/react netive/project/watch/appDigitalWatch.jsx"],"names":["React","useState","useEffect","useRef","WIDTH","Dimensions","get","width","ButtonsRow","children","styles","buttonsRow","RoundButton","title","color","background","onPress","disable","button","backgroundColor","buttonBorder","buttonTitle","hour","Date","getHours","minutes","getMinutes","seconds","getSeconds","am_pm","getCurrentTime","AppDigitalWatch","fotmetWatch","setfotmetWatch","hh","sethhclock","mm","setmmclock","ss","setssclock","date","setdate","hoursValue","sethoursValue","minuteValue","setminuteValue","secondValue","setsecondValue","dateValue","setDateValue","modal","setModal","clockNow","setInterval","toLocaleDateString","set","chekValid","flase","save","setHours","console","log","setMinutes","setSeconds","pormatWatch","setclock","toLocaleTimeString","container","data","allSet","clock","minute","second","StyleSheet","create","flex","alignItems","paddingTop","paddingHorizontal","fontSize","fontWeight","flexDirection","alignSelf","justifyContent","marginTop","marginBottom","height","borderRadius","alignContent","borderWidth"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,EAAoCC,MAApC,QAAkD,OAAlD;;;;;;;;;;;AAIA,IAAMC,KAAK,GAAEC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAAtC;;AAEA,SAASC,UAAT,OAA+B;AAAA,MAAVC,QAAU,QAAVA,QAAU;AAC3B,SACE,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,UAApB;AAAA,cAAiCF;AAAjC,IADF;AAGD;;AAED,SAASG,WAAT,QAAgE;AAAA,MAA1CC,KAA0C,SAA1CA,KAA0C;AAAA,MAAnCC,KAAmC,SAAnCA,KAAmC;AAAA,MAA5BC,UAA4B,SAA5BA,UAA4B;AAAA,MAAjBC,QAAiB,SAAjBA,OAAiB;AAAA,MAATC,OAAS,SAATA,OAAS;AAC9D,SACE,KAAC,gBAAD;AAAkB,IAAA,OAAO,EAAE;AAAA,aAAK,CAACA,OAAD,IAAYD,QAAO,EAAxB;AAAA,KAA3B;AAAwD,IAAA,KAAK,EAAE,CAACN,MAAM,CAACQ,MAAR,EAAe;AAACC,MAAAA,eAAe,EAAEJ;AAAlB,KAAf,CAA/D;AAA8G,IAAA,aAAa,EAAGE,OAAO,GAAG,GAAH,GAAQ,GAA7I;AAAA,cACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEP,MAAM,CAACU,YAApB;AAAA,gBACE,KAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACV,MAAM,CAACW,WAAR,EAAoB;AAACP,UAAAA,KAAK,EAALA;AAAD,SAApB,CAAb;AAAA,kBAA4CD;AAA5C;AADF;AADF,IADF;AAOD;;AAED,IAAIS,IAAI,GAAG,IAAIC,IAAJ,GAAWC,QAAX,EAAX;AACA,IAAIC,OAAO,GAAG,IAAIF,IAAJ,GAAWG,UAAX,EAAd;AACA,IAAIC,OAAO,GAAG,IAAIJ,IAAJ,GAAWK,UAAX,EAAd;AACA,IAAIC,KAAK,GAAG,IAAZ;;AAEF,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAE3B,MAAIL,OAAO,GAAG,EAAd,EAAkB;AAChBA,IAAAA,OAAO,GAAG,MAAMA,OAAhB;AACD;;AAED,MAAIE,OAAO,GAAG,EAAd,EAAkB;AAChBA,IAAAA,OAAO,GAAG,MAAMA,OAAhB;AACD;;AAED,MAAIL,IAAI,GAAG,EAAX,EAAe;AACbA,IAAAA,IAAI,GAAGA,IAAI,GAAG,EAAd;AACD;;AAED,MAAIA,IAAI,IAAI,CAAZ,EAAe;AACbA,IAAAA,IAAI,GAAG,EAAP;AACD;;AAED,MAAI,IAAIC,IAAJ,GAAWC,QAAX,KAAwB,EAA5B,EAAgC;AAC9BK,IAAAA,KAAK,GAAG,IAAR;AACD;AAEF,CAtBD;;AAwBC,IAAME,eAAe,GAAG,SAAlBA,eAAkB,GAAK;AAC1B,kBAAoC9B,QAAQ,CAAC,OAAD,CAA5C;AAAA;AAAA,MAAO+B,WAAP;AAAA,MAAmBC,cAAnB;;AACA,mBAAwBhC,QAAQ,EAAhC;AAAA;AAAA,MAAOiC,EAAP;AAAA,MAAUC,UAAV;;AACA,mBAAwBlC,QAAQ,EAAhC;AAAA;AAAA,MAAOmC,EAAP;AAAA,MAAUC,UAAV;;AACA,mBAAwBpC,QAAQ,EAAhC;AAAA;AAAA,MAAOqC,EAAP;AAAA,MAAUC,UAAV;;AACA,mBAAuBtC,QAAQ,EAA/B;AAAA;AAAA,MAAOuC,IAAP;AAAA,MAAYC,OAAZ;;AAEA,oBAAkCxC,QAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAOyC,UAAP;AAAA,MAAkBC,aAAlB;;AACA,oBAAoC1C,QAAQ,CAAC,EAAD,CAA5C;AAAA;AAAA,MAAO2C,WAAP;AAAA,MAAmBC,cAAnB;;AACA,oBAAoC5C,QAAQ,CAAC,EAAD,CAA5C;AAAA;AAAA,MAAO6C,WAAP;AAAA,MAAmBC,cAAnB;;AACA,oBAAgC9C,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAO+C,SAAP;AAAA,MAAiBC,YAAjB;;AAEA,oBAAuBhD,QAAQ,CAAC,KAAD,CAA/B;AAAA;AAAA,MAAOiD,KAAP;AAAA,MAAaC,QAAb;;AAEA,MAAMC,QAAQ,GAAC,IAAI7B,IAAJ,EAAf;AAEArB,EAAAA,SAAS,CAAC,YAAI;AACVmD,IAAAA,WAAW,CAAC,YAAI;AACdvB,MAAAA,cAAc;AACdK,MAAAA,UAAU,CAACb,IAAD,CAAV;AACAe,MAAAA,UAAU,CAACZ,OAAD,CAAV;AACAc,MAAAA,UAAU,CAACZ,OAAD,CAAV;AAEEc,MAAAA,OAAO,CAACW,QAAQ,CAACE,kBAAT,EAAD,CAAP;AACH,KAPU,EAOT,IAPS,CAAX;AAQH,GATQ,CAAT;;AAWA,MAAMC,GAAG,GAAG,SAANA,GAAM,GAAI;AACd,QAAGL,KAAK,IAAI,KAAZ,EAAkB;AAChBC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAFD,MAEK;AACHA,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACD;AACF,GAND;;AAQA,MAAMK,SAAS,GAAE,SAAXA,SAAW,GAAI;AACnB,QAAGd,UAAU,IAAG,EAAhB,EAAmB;AACjB,aAAOe,KAAP;AACD,KAFD,MAEM,IAAIb,WAAW,IAAI,EAAnB,EAAsB;AAC1B,aAAO,KAAP;AACD,KAFK,MAEA,IAAGE,WAAW,IAAI,EAAlB,EAAqB;AACzB,aAAO,KAAP;AACD,KAFK,MAEA,IAAGN,IAAI,IAAI,EAAX,EAAc;AAClB,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD,GAZD;;AAcA,MAAMkB,IAAI,GAAE,SAANA,IAAM,GAAI;AACf,QAAGF,SAAS,EAAZ,EAAe;AACZJ,MAAAA,QAAQ,CAACO,QAAT,CAAkBjB,UAAlB;AACAkB,MAAAA,OAAO,CAACC,GAAR,CAAYnB,UAAZ;AACAU,MAAAA,QAAQ,CAACU,UAAT,CAAoBlB,WAApB;AACAgB,MAAAA,OAAO,CAACC,GAAR,CAAYjB,WAAZ;AACAQ,MAAAA,QAAQ,CAACW,UAAT,CAAoBjB,WAApB;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAYf,WAAZ;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACF;AACD,GAVD;;AAYA,MAAMG,WAAW,GAAG,SAAdA,WAAc,GAAI;AACtB,QAAIhC,WAAW,IAAI,OAAnB,EAA4B;AAC1BC,MAAAA,cAAc,CAAC,KAAD,CAAd;AACAgC,MAAAA,QAAQ,CAACb,QAAQ,CAACc,kBAAT,CAA4B,OAA5B,CAAD,CAAR;AACD,KAHD,MAGO;AACLjC,MAAAA,cAAc,CAAC,OAAD,CAAd;AACAgC,MAAAA,QAAQ,CAACb,QAAQ,CAACc,kBAAT,CAA4B,OAA5B,CAAD,CAAR;AACD;AACF,GARD;;AAUA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAExD,MAAM,CAACyD,SAApB;AAAA,eACE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAEzD,MAAM,CAAC0D,IAApB;AAAA,sBAA4BhB,QAAQ,CAACc,kBAAT,EAA5B;AAAA,MADF,EAEE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAExD,MAAM,CAAC0D,IAApB;AAAA,gBAA2B5B;AAA3B,MAFF,EAIGR,WAAW,IAAI,OAAf,IAA2B,MAAC,UAAD;AAAA,iBACxB,KAAC,WAAD;AAAa,QAAA,KAAK,EAAC,KAAnB;AAAyB,QAAA,KAAK,EAAC,OAA/B;AAAuC,QAAA,UAAU,EAAC,KAAlD;AAAwD,QAAA,OAAO,EAAEuB;AAAjE,QADwB,EAExB,KAAC,WAAD;AAAa,QAAA,KAAK,EAAC,OAAnB;AAA2B,QAAA,KAAK,EAAC,MAAjC;AAAwC,QAAA,UAAU,EAAC,MAAnD;AAA2D,QAAA,OAAO,EAAES;AAApE,QAFwB;AAAA,MAJ9B,EAUGhC,WAAW,IAAI,KAAf,IAAyB,MAAC,UAAD;AAAA,iBACtB,KAAC,WAAD;AAAa,QAAA,KAAK,EAAC,KAAnB;AAAyB,QAAA,KAAK,EAAC,OAA/B;AAAuC,QAAA,UAAU,EAAC,KAAlD;AAAwD,QAAA,OAAO,EAAEuB;AAAjE,QADsB,EAEtB,KAAC,WAAD;AAAa,QAAA,KAAK,EAAC,KAAnB;AAAyB,QAAA,KAAK,EAAC,MAA/B;AAAsC,QAAA,UAAU,EAAC,MAAjD;AAAyD,QAAA,OAAO,EAAES;AAAlE,QAFsB;AAAA,MAV5B,EAgBE,KAAC,KAAD;AAAO,MAAA,OAAO,EAAEd,KAAhB;AAAuB,MAAA,aAAa,EAAG,MAAvC;AAA+C,MAAA,KAAK,EAAExC,MAAM,CAACwC,KAA7D;AAAoE,MAAA,WAAW,EAAE,IAAjF;AAAA,gBACE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAExC,MAAM,CAAC2D,MAApB;AAAA,mBACI,KAAC,SAAD;AAAW,UAAA,KAAK,EAAE3D,MAAM,CAAC4D,KAAzB;AAAgC,UAAA,QAAQ,EAAE,oBAAI;AAAC3B,YAAAA,aAAa;AAAC,WAA7D;AAA+D,UAAA,WAAW,EAAC;AAA3E,UADJ,EAEI,KAAC,SAAD;AAAW,UAAA,KAAK,EAAEjC,MAAM,CAAC4D,KAAzB;AAAgC,UAAA,QAAQ,EAAE,kBAACC,MAAD,EAAU;AAAC1B,YAAAA,cAAc,CAAC0B,MAAD,CAAd;AAAuB,WAA5E;AAA8E,UAAA,WAAW,EAAC;AAA1F,UAFJ,EAGI,KAAC,SAAD;AAAW,UAAA,KAAK,EAAE7D,MAAM,CAAC4D,KAAzB;AAAgC,UAAA,QAAQ,EAAE,kBAACE,MAAD,EAAU;AAACzB,YAAAA,cAAc,CAACyB,MAAD,CAAd;AAAuB,WAA5E;AAA8E,UAAA,WAAW,EAAC;AAA1F,UAHJ,EAII,KAAC,SAAD;AAAY,UAAA,QAAQ,EAAE,kBAAChC,IAAD,EAAQ;AAACS,YAAAA,YAAY,CAACT,IAAD,CAAZ;AAAmB,WAAlD;AAAoD,UAAA,WAAW,EAAC;AAAhE,UAJJ,EAKI,KAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,MAAd;AAAqB,UAAA,OAAO,EAAEkB;AAA9B,UALJ;AAAA;AADF,MAhBF;AAAA,IADF;AA8BH,CArGA;;AAuGD,IAAMhD,MAAM,GAAG+D,UAAU,CAACC,MAAX,CAAkB;AAC7BP,EAAAA,SAAS,EAAE;AACPQ,IAAAA,IAAI,EAAE,CADC;AAEPxD,IAAAA,eAAe,EAAE,OAFV;AAGPyD,IAAAA,UAAU,EAAE,QAHL;AAIPC,IAAAA,UAAU,EAAE,GAJL;AAKPC,IAAAA,iBAAiB,EAAC;AALX,GADkB;AAQ3BV,EAAAA,IAAI,EAAC;AACHtD,IAAAA,KAAK,EAAC,OADH;AAEHiE,IAAAA,QAAQ,EAAE,EAFP;AAGHC,IAAAA,UAAU,EAAC,KAHR;AAIHzE,IAAAA,KAAK,EAAE;AAJJ,GARsB;AAc3BI,EAAAA,UAAU,EAAC;AACTsE,IAAAA,aAAa,EAAC,KADL;AAETC,IAAAA,SAAS,EAAC,SAFD;AAGTC,IAAAA,cAAc,EAAC,eAHN;AAITC,IAAAA,SAAS,EAAC,EAJD;AAKTC,IAAAA,YAAY,EAAC;AALJ,GAdgB;AAqB3BnE,EAAAA,MAAM,EAAC;AACLX,IAAAA,KAAK,EAAE,EADF;AAEL+E,IAAAA,MAAM,EAAE,EAFH;AAGLC,IAAAA,YAAY,EAAC,EAHR;AAILJ,IAAAA,cAAc,EAAC,QAJV;AAKLK,IAAAA,YAAY,EAAC;AALR,GArBoB;AA4B3BnE,EAAAA,WAAW,EAAC;AACV0D,IAAAA,QAAQ,EAAC;AADC,GA5Be;AA+B3B3D,EAAAA,YAAY,EAAC;AACXb,IAAAA,KAAK,EAAE,EADI;AAEX+E,IAAAA,MAAM,EAAE,EAFG;AAGXC,IAAAA,YAAY,EAAC,EAHF;AAIXE,IAAAA,WAAW,EAAC,CAJD;AAKXN,IAAAA,cAAc,EAAC,QALJ;AAMXK,IAAAA,YAAY,EAAC;AANF,GA/Bc;AAuC3BtC,EAAAA,KAAK,EAAC;AACJoC,IAAAA,MAAM,EAAE,GADJ;AAEJ/E,IAAAA,KAAK,EAAEH,KAAK,GAAC,EAFT;AAGJyE,IAAAA,UAAU,EAAC,EAHP;AAIJ1D,IAAAA,eAAe,EAAC,KAJZ;AAKJoE,IAAAA,YAAY,EAAE;AALV;AAvCqB,CAAlB,CAAf;AAoDA,eAAexD,eAAf","sourcesContent":["import React, { useState,useEffect, useRef } from 'react';\r\nimport {  StyleSheet, View ,Text,TouchableOpacity,Modal, Button,TextInput, Dimensions} from 'react-native';\r\n\r\n\r\nconst WIDTH= Dimensions.get('window').width\r\n\r\nfunction ButtonsRow({children}){\r\n    return(\r\n      <View style={styles.buttonsRow}>{children}</View>\r\n    )\r\n  }\r\n\r\n  function RoundButton({title, color, background,onPress,disable}){\r\n    return (\r\n      <TouchableOpacity onPress={()=> !disable && onPress() } style={[styles.button,{backgroundColor: background}]} activeOpacity={ disable ? 1.0: 0.5}>\r\n        <View style={styles.buttonBorder}>\r\n          <Text style={[styles.buttonTitle,{color}]}>{title}</Text>\r\n        </View>\r\n      </TouchableOpacity>\r\n    )\r\n  }\r\n\r\n  let hour = new Date().getHours();\r\n  let minutes = new Date().getMinutes();\r\n  let seconds = new Date().getSeconds();\r\n  let am_pm = 'pm';\r\n\r\nconst getCurrentTime = () => {\r\n\r\n  if (minutes < 10) {\r\n    minutes = '0' + minutes;\r\n  }\r\n\r\n  if (seconds < 10) {\r\n    seconds = '0' + seconds;\r\n  }\r\n\r\n  if (hour > 12) {\r\n    hour = hour - 12;\r\n  }\r\n\r\n  if (hour == 0) {\r\n    hour = 12;\r\n  }\r\n\r\n  if (new Date().getHours() < 12) {\r\n    am_pm = 'am';\r\n  }\r\n\r\n}\r\n\r\n const AppDigitalWatch = ()=> {\r\n    const [fotmetWatch,setfotmetWatch]= useState('AM/PM')\r\n    const [hh,sethhclock] = useState()\r\n    const [mm,setmmclock] = useState()\r\n    const [ss,setssclock] = useState()\r\n    const [date,setdate] = useState()\r\n\r\n    const [hoursValue,sethoursValue]= useState('')\r\n    const [minuteValue,setminuteValue]= useState('')\r\n    const [secondValue,setsecondValue]= useState('')\r\n    const [dateValue,setDateValue]= useState('')\r\n\r\n    const [modal,setModal]=useState(false)\r\n\r\n    const clockNow=new Date()\r\n\r\n    useEffect(()=>{\r\n        setInterval(()=>{\r\n          getCurrentTime()\r\n          sethhclock(hour)\r\n          setmmclock(minutes)\r\n          setssclock(seconds)\r\n            // setclock(clockNow.toLocaleTimeString('fr-FR'))\r\n            setdate(clockNow.toLocaleDateString())\r\n        },1000)\r\n    })\r\n\r\n    const set = ()=>{\r\n      if(modal == false){\r\n        setModal(true)\r\n      }else{\r\n        setModal(false)\r\n      }\r\n    }\r\n\r\n    const chekValid= ()=>{\r\n      if(hoursValue ==''){\r\n        return flase\r\n      }else if (minuteValue == ''){\r\n        return false\r\n      }else if(secondValue == \"\"){\r\n        return false\r\n      }else if(date == \"\"){\r\n        return false\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    const save= ()=>{\r\n     if(chekValid()){\r\n        clockNow.setHours(hoursValue)\r\n        console.log(hoursValue)\r\n        clockNow.setMinutes(minuteValue)\r\n        console.log(minuteValue)\r\n        clockNow.setSeconds(secondValue)\r\n        console.log(secondValue)\r\n        console.log('good')\r\n     }\r\n    }\r\n\r\n    const pormatWatch = ()=>{\r\n      if (fotmetWatch == 'AM/PM') {\r\n        setfotmetWatch('24H')\r\n        setclock(clockNow.toLocaleTimeString('en-US'))\r\n      } else {\r\n        setfotmetWatch('AM/PM')\r\n        setclock(clockNow.toLocaleTimeString('fr-FR'))\r\n      }  \r\n    }\r\n\r\n    return (\r\n      <View style={styles.container}>\r\n        <Text style={styles.data}> {clockNow.toLocaleTimeString()}</Text>\r\n        <Text style={styles.data}>{date}</Text>\r\n\r\n        {fotmetWatch == 'AM/PM' && (<ButtonsRow>\r\n            <RoundButton title=\"Set\" color=\"green\" background=\"red\" onPress={set}></RoundButton>\r\n            <RoundButton title=\"AM/PM\" color=\"pink\" background=\"blue\"  onPress={pormatWatch}></RoundButton>\r\n        </ButtonsRow>\r\n        )}\r\n\r\n        {fotmetWatch == '24H' && (<ButtonsRow>\r\n            <RoundButton title=\"Set\" color=\"green\" background=\"red\" onPress={set}></RoundButton>\r\n            <RoundButton title=\"24H\" color=\"pink\" background=\"blue\"  onPress={pormatWatch}></RoundButton>\r\n        </ButtonsRow>\r\n        )}\r\n\r\n        <Modal visible={modal} animationType ={'fade'} style={styles.modal} transparent={true}>\r\n          <View style={styles.allSet}>\r\n              <TextInput style={styles.clock} onChange={()=>{sethoursValue}} placeholder='HH'/>\r\n              <TextInput style={styles.clock} onChange={(minute)=>{setminuteValue(minute)}} placeholder='MM'/>\r\n              <TextInput style={styles.clock} onChange={(second)=>{setsecondValue(second)}} placeholder='SS'/>\r\n              <TextInput  onChange={(date)=>{setDateValue(date)}} placeholder='09/01/2021'/>\r\n              <Button title=\"Save\" onPress={save}></Button>\r\n          </View>\r\n        </Modal>\r\n    \r\n      </View>\r\n   );\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: 'black',\r\n        alignItems: 'center',\r\n        paddingTop: 100,\r\n        paddingHorizontal:20\r\n      },\r\n      data:{\r\n        color:'white',\r\n        fontSize: 15,\r\n        fontWeight:'200',\r\n        width: 100,\r\n      },\r\n      buttonsRow:{\r\n        flexDirection:'row',\r\n        alignSelf:'stretch',\r\n        justifyContent:'space-between',\r\n        marginTop:80,\r\n        marginBottom:30\r\n      },\r\n      button:{\r\n        width: 80,\r\n        height: 80,\r\n        borderRadius:40,\r\n        justifyContent:'center',\r\n        alignContent:'center'\r\n      },\r\n      buttonTitle:{\r\n        fontSize:18,\r\n      },\r\n      buttonBorder:{\r\n        width: 76,\r\n        height: 76,\r\n        borderRadius:38,\r\n        borderWidth:1,\r\n        justifyContent:'center',\r\n        alignContent:'center'\r\n      },\r\n      modal:{\r\n        height: 150,\r\n        width: WIDTH-80,\r\n        paddingTop:10,\r\n        backgroundColor:'red',\r\n        borderRadius: 10\r\n      },\r\n      \r\n    \r\n\r\n    \r\n});\r\n\r\nexport default AppDigitalWatch\r\n\r\n"]},"metadata":{},"sourceType":"module"}