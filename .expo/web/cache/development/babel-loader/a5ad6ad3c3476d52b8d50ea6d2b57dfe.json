{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Timer from \"./components/Timer\";\nimport ButtonClick from \"../utills/components/ButtonClick\";\nimport ButtonsRow from \"../utills/components/ButtonsRow\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Stopwatch = function Stopwatch() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      startTime = _useState2[0],\n      setStartTime = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currTime = _useState4[0],\n      setCurrTime = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      lastLap = _useState6[0],\n      setlastLap = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      timer = _useState8[0],\n      setTimer = _useState8[1];\n\n  var start = function start() {\n    var time = new Date().getTime();\n    setStartTime(time);\n    setCurrTime(time);\n    setTimer(setInterval(function () {\n      setCurrTime(new Date().getTime());\n    }, 100));\n  };\n\n  var stop = function stop() {\n    var time = new Date().getTime();\n    clearInterval(timer);\n    setlastLap(lastLap + time - startTime);\n    setStartTime(0);\n    setCurrTime(0);\n  };\n\n  var reset = function reset() {\n    clearInterval(timer);\n    setStartTime(0);\n    setCurrTime(0);\n    setlastLap(0);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Timer, {\n      interval: lastLap + currTime - startTime,\n      style: styles.bigTimer\n    }), _jsx(Timer, {\n      interval: lastLap,\n      style: styles.smallTimer\n    }), startTime == 0 && _jsxs(ButtonsRow, {\n      children: [_jsx(ButtonClick, {\n        title: \"Start\",\n        background: \"#5F9EA0\",\n        onPress: start,\n        fontSize: 20\n      }), _jsx(ButtonClick, {\n        title: \"Rest\",\n        background: \"#5F9EA0\",\n        onPress: reset,\n        fontSize: 22\n      })]\n    }), startTime > 0 && _jsxs(ButtonsRow, {\n      children: [_jsx(ButtonClick, {\n        title: \"Stop\",\n        background: \"#B0E0E6\",\n        onPress: stop,\n        fontSize: 20\n      }), _jsx(ButtonClick, {\n        title: \"Rest\",\n        background: \"#5F9EA0\",\n        onPress: reset,\n        fontSize: 22\n      })]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'black',\n    alignItems: 'center',\n    paddingTop: 130\n  },\n  bigTimer: {\n    color: 'white',\n    fontSize: 55,\n    fontWeight: '100',\n    width: '50'\n  },\n  smallTimer: {\n    color: 'white',\n    fontSize: 20,\n    width: '25',\n    fontWeight: '300'\n  }\n});\nexport default Stopwatch;","map":{"version":3,"sources":["C:/Users/micha/Desktop/react netive/project/stopper/Stopwatch.jsx"],"names":["React","useState","Timer","ButtonClick","ButtonsRow","Stopwatch","startTime","setStartTime","currTime","setCurrTime","lastLap","setlastLap","timer","setTimer","start","time","Date","getTime","setInterval","stop","clearInterval","reset","styles","container","bigTimer","smallTimer","StyleSheet","create","flex","backgroundColor","alignItems","paddingTop","color","fontSize","fontWeight","width"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { StyleSheet, View } from 'react-native';\r\n\r\n// Import components from the project\r\nimport Timer from './components/Timer';\r\nimport ButtonClick from '../utills/components/ButtonClick';\r\nimport ButtonsRow from '../utills/components/ButtonsRow';\r\n\r\n\r\nconst Stopwatch= ()=>{\r\n\r\n  const [startTime, setStartTime]= useState(0)\r\n  const [currTime, setCurrTime]= useState(0)\r\n  const [lastLap, setlastLap]= useState(0) //lastTime\r\n  const [timer, setTimer]= useState(0) //setInterval\r\n\r\n\r\n  // Functions for the buttons\r\n  // Stopwatch boot button\r\n  const start = ()=>{\r\n    const time = new Date().getTime()\r\n    setStartTime(time)\r\n    setCurrTime(time)\r\n\r\n    setTimer(\r\n      setInterval(()=>{\r\n        setCurrTime(new Date().getTime())\r\n      },100)\r\n    ) \r\n  }\r\n  //Stopwatch stop button\r\n  const stop = ()=>{\r\n    const time = new Date().getTime()\r\n    clearInterval(timer)\r\n    setlastLap(lastLap + time - startTime)\r\n    setStartTime(0)\r\n    setCurrTime(0)\r\n  }\r\n\r\n  //Stopwatch reset button\r\n  const reset = ()=>{\r\n    clearInterval(timer)\r\n    setStartTime(0)\r\n    setCurrTime(0)\r\n    setlastLap(0)\r\n  }\r\n\r\n    return (\r\n      <View style={styles.container}>\r\n\r\n      {/* Running stopwatch display*/}\r\n        <Timer \r\n          interval={lastLap + currTime - startTime} \r\n          style={styles.bigTimer} >\r\n        </Timer>\r\n        \r\n        {/*Show last stop run*/}\r\n        <Timer \r\n          interval={lastLap} \r\n          style={styles.smallTimer}>\r\n        </Timer>\r\n        \r\n        {startTime == 0 && (\r\n          <ButtonsRow>\r\n          <ButtonClick title=\"Start\"  background=\"#5F9EA0\" onPress={start} fontSize={20}></ButtonClick>\r\n          <ButtonClick title=\"Rest\"  background=\"#5F9EA0\" onPress={reset} fontSize={22}></ButtonClick>\r\n        </ButtonsRow>\r\n        )}\r\n\r\n        {startTime > 0 && (\r\n        <ButtonsRow>\r\n          <ButtonClick title=\"Stop\"  background=\"#B0E0E6\"  onPress={stop} fontSize={20}></ButtonClick>\r\n          <ButtonClick title=\"Rest\"  background=\"#5F9EA0\" onPress={reset} fontSize={22}></ButtonClick>\r\n        </ButtonsRow>\r\n        )}\r\n\r\n      </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: 'black',\r\n    alignItems: 'center',\r\n    paddingTop: 130,\r\n  },\r\n  bigTimer:{\r\n    color:'white',\r\n    fontSize: 55,\r\n    fontWeight:'100',\r\n    width: '50',\r\n  },\r\n  smallTimer:{\r\n    color:'white',\r\n    fontSize: 20,\r\n    width: '25',\r\n    fontWeight:'300',\r\n  }\r\n});\r\n\r\nexport default Stopwatch\r\n"]},"metadata":{},"sourceType":"module"}