{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ButtonsRow from \"./components/ButtonsRow\";\nimport ButtonClick from \"./components/ButtonClick\";\nimport DisplayDateClock from \"./components/DisplayDateClock\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar hour = new Date().getHours();\nvar minutes = new Date().getMinutes();\nvar seconds = new Date().getSeconds();\nvar am_pm = 'pm';\n\nvar getCurrentTime = function getCurrentTime() {\n  if (minutes < 10) {\n    minutes = '0' + minutes;\n  }\n\n  if (seconds < 10) {\n    seconds = '0' + seconds;\n  }\n\n  if (hour > 12) {\n    hour = hour - 12;\n  }\n\n  if (hour == 0) {\n    hour = 12;\n  }\n\n  if (new Date().getHours() < 12) {\n    am_pm = 'am';\n  }\n};\n\nvar AppWatch = function AppWatch() {\n  var _useState = useState('AM/PM'),\n      _useState2 = _slicedToArray(_useState, 2),\n      fotmetWatch = _useState2[0],\n      setfotmetWatch = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hh = _useState4[0],\n      sethhclock = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      mm = _useState6[0],\n      setmmclock = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      ss = _useState8[0],\n      setssclock = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      date = _useState10[0],\n      setdate = _useState10[1];\n\n  var _useState11 = useState(),\n      _useState12 = _slicedToArray(_useState11, 2),\n      clock = _useState12[0],\n      setclock = _useState12[1];\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      hoursValue = _useState14[0],\n      sethoursValue = _useState14[1];\n\n  var _useState15 = useState(''),\n      _useState16 = _slicedToArray(_useState15, 2),\n      minuteValue = _useState16[0],\n      setminuteValue = _useState16[1];\n\n  var _useState17 = useState(''),\n      _useState18 = _slicedToArray(_useState17, 2),\n      secondValue = _useState18[0],\n      setsecondValue = _useState18[1];\n\n  var _useState19 = useState(''),\n      _useState20 = _slicedToArray(_useState19, 2),\n      dateValue = _useState20[0],\n      setDateValue = _useState20[1];\n\n  var _useState21 = useState(false),\n      _useState22 = _slicedToArray(_useState21, 2),\n      modalOpen = _useState22[0],\n      setmodalOpen = _useState22[1];\n\n  var clockNow = new Date('1995-12-17T03:24:00');\n  useEffect(function () {\n    var interval = setInterval(function () {\n      getCurrentTime();\n      sethhclock(hour);\n      setmmclock(minutes);\n      setssclock(seconds);\n      setclock(clockNow.toLocaleTimeString());\n      setdate(clockNow.toLocaleDateString());\n    }, 1000);\n    return function () {\n      clearInterval(interval);\n    };\n  });\n\n  var set = function set() {\n    if (modalOpen == false) {\n      setmodalOpen(true);\n    } else {\n      setmodalOpen(false);\n    }\n  };\n\n  var chekValid = function chekValid() {\n    if (hoursValue == '') {\n      return flase;\n    } else if (minuteValue == '') {\n      return false;\n    } else if (secondValue == \"\") {\n      return false;\n    } else if (date == \"\") {\n      return false;\n    }\n\n    return true;\n  };\n\n  var save = function save() {\n    if (chekValid()) {\n      clockNow.setHours(Number(hoursValue), Number(minuteValue), Number(secondValue));\n      console.log(+hoursValue);\n      console.log(+minuteValue);\n      console.log(+secondValue);\n      setmodalOpen(false);\n    }\n  };\n\n  var pormatWatch = function pormatWatch() {\n    if (fotmetWatch == 'AM/PM') {\n      setfotmetWatch('24H');\n      setclock(clockNow.toLocaleTimeString('en-US'));\n    } else {\n      setfotmetWatch('AM/PM');\n      setclock(clockNow.toLocaleTimeString('fr-FR'));\n    }\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(DisplayDateClock, {\n      clock: clock,\n      date: date\n    }), fotmetWatch == 'AM/PM' && _jsxs(ButtonsRow, {\n      children: [_jsx(ButtonClick, {\n        title: \"Set\",\n        background: \"#5F9EA0\",\n        fontSize: \"15\",\n        onPress: set\n      }), _jsx(ButtonClick, {\n        title: \"AM/PM\",\n        background: \"#5F9EA0\",\n        fontSize: \"10\",\n        onPress: pormatWatch\n      })]\n    }), fotmetWatch == '24H' && _jsxs(ButtonsRow, {\n      children: [_jsx(ButtonClick, {\n        title: \"Set\",\n        background: \"#5F9EA0\",\n        fontSize: \"15\",\n        onPress: set\n      }), _jsx(ButtonClick, {\n        title: \"24H\",\n        background: \"#B0E0E6\",\n        fontSize: \"10\",\n        onPress: pormatWatch\n      })]\n    }), _jsx(Modal, {\n      visible: modalOpen,\n      animationType: 'slide',\n      style: styles.modal,\n      transparent: true,\n      children: _jsxs(View, {\n        style: styles.allSet,\n        children: [_jsx(TextInput, {\n          style: styles.clock,\n          onChangeText: sethoursValue,\n          placeholder: \"HH\",\n          keyboardType: \"numeric\"\n        }), _jsx(TextInput, {\n          style: styles.clock,\n          onChangeText: setminuteValue,\n          placeholder: \"MM\",\n          keyboardType: \"numeric\"\n        }), _jsx(TextInput, {\n          style: styles.clock,\n          onChangeText: setsecondValue,\n          placeholder: \"SS\",\n          keyboardType: \"numeric\"\n        }), _jsx(TextInput, {\n          onChange: setDateValue,\n          placeholder: \"09/01/2021\"\n        }), _jsx(Button, {\n          title: \"Save\",\n          onPress: save\n        })]\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'black',\n    alignItems: 'center',\n    paddingTop: 100,\n    paddingHorizontal: 20\n  },\n  modal: {\n    backgroundColor: 'red'\n  }\n});\nexport default AppWatch;","map":{"version":3,"sources":["C:/Users/micha/Desktop/react netive/project/watch/appWatch.jsx"],"names":["React","useState","useEffect","ButtonsRow","ButtonClick","DisplayDateClock","hour","Date","getHours","minutes","getMinutes","seconds","getSeconds","am_pm","getCurrentTime","AppWatch","fotmetWatch","setfotmetWatch","hh","sethhclock","mm","setmmclock","ss","setssclock","date","setdate","clock","setclock","hoursValue","sethoursValue","minuteValue","setminuteValue","secondValue","setsecondValue","dateValue","setDateValue","modalOpen","setmodalOpen","clockNow","interval","setInterval","toLocaleTimeString","toLocaleDateString","clearInterval","set","chekValid","flase","save","setHours","Number","console","log","pormatWatch","styles","container","modal","allSet","StyleSheet","create","flex","backgroundColor","alignItems","paddingTop","paddingHorizontal"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;;AAGA,OAAOC,UAAP;AACA,OAAOC,WAAP;AACA,OAAOC,gBAAP;;;AAGE,IAAIC,IAAI,GAAG,IAAIC,IAAJ,GAAWC,QAAX,EAAX;AACA,IAAIC,OAAO,GAAG,IAAIF,IAAJ,GAAWG,UAAX,EAAd;AACA,IAAIC,OAAO,GAAG,IAAIJ,IAAJ,GAAWK,UAAX,EAAd;AACA,IAAIC,KAAK,GAAG,IAAZ;;AAEF,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAIL,OAAO,GAAG,EAAd,EAAkB;AAChBA,IAAAA,OAAO,GAAG,MAAMA,OAAhB;AACD;;AACD,MAAIE,OAAO,GAAG,EAAd,EAAkB;AAChBA,IAAAA,OAAO,GAAG,MAAMA,OAAhB;AACD;;AACD,MAAIL,IAAI,GAAG,EAAX,EAAe;AACbA,IAAAA,IAAI,GAAGA,IAAI,GAAG,EAAd;AACD;;AACD,MAAIA,IAAI,IAAI,CAAZ,EAAe;AACbA,IAAAA,IAAI,GAAG,EAAP;AACD;;AACD,MAAI,IAAIC,IAAJ,GAAWC,QAAX,KAAwB,EAA5B,EAAgC;AAC9BK,IAAAA,KAAK,GAAG,IAAR;AACD;AACF,CAhBD;;AAkBC,IAAME,QAAQ,GAAG,SAAXA,QAAW,GAAK;AACnB,kBAAoCd,QAAQ,CAAC,OAAD,CAA5C;AAAA;AAAA,MAAOe,WAAP;AAAA,MAAmBC,cAAnB;;AACA,mBAAwBhB,QAAQ,EAAhC;AAAA;AAAA,MAAOiB,EAAP;AAAA,MAAUC,UAAV;;AACA,mBAAwBlB,QAAQ,EAAhC;AAAA;AAAA,MAAOmB,EAAP;AAAA,MAAUC,UAAV;;AACA,mBAAwBpB,QAAQ,EAAhC;AAAA;AAAA,MAAOqB,EAAP;AAAA,MAAUC,UAAV;;AACA,mBAAuBtB,QAAQ,EAA/B;AAAA;AAAA,MAAOuB,IAAP;AAAA,MAAYC,OAAZ;;AACA,oBAAsBxB,QAAQ,EAA9B;AAAA;AAAA,MAAMyB,KAAN;AAAA,MAAYC,QAAZ;;AAEA,oBAAkC1B,QAAQ,CAAC,EAAD,CAA1C;AAAA;AAAA,MAAO2B,UAAP;AAAA,MAAkBC,aAAlB;;AACA,oBAAoC5B,QAAQ,CAAC,EAAD,CAA5C;AAAA;AAAA,MAAO6B,WAAP;AAAA,MAAmBC,cAAnB;;AACA,oBAAoC9B,QAAQ,CAAC,EAAD,CAA5C;AAAA;AAAA,MAAO+B,WAAP;AAAA,MAAmBC,cAAnB;;AACA,oBAAgChC,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOiC,SAAP;AAAA,MAAiBC,YAAjB;;AAEA,oBAA+BlC,QAAQ,CAAC,KAAD,CAAvC;AAAA;AAAA,MAAOmC,SAAP;AAAA,MAAiBC,YAAjB;;AAEA,MAAMC,QAAQ,GAAC,IAAI/B,IAAJ,CAAS,qBAAT,CAAf;AAEAL,EAAAA,SAAS,CAAC,YAAI;AACV,QAAMqC,QAAQ,GAAEC,WAAW,CAAC,YAAI;AAC9B1B,MAAAA,cAAc;AACdK,MAAAA,UAAU,CAACb,IAAD,CAAV;AACAe,MAAAA,UAAU,CAACZ,OAAD,CAAV;AACAc,MAAAA,UAAU,CAACZ,OAAD,CAAV;AACAgB,MAAAA,QAAQ,CAACW,QAAQ,CAACG,kBAAT,EAAD,CAAR;AACEhB,MAAAA,OAAO,CAACa,QAAQ,CAACI,kBAAT,EAAD,CAAP;AACH,KAP0B,EAOzB,IAPyB,CAA3B;AASA,WAAO,YAAI;AACTC,MAAAA,aAAa,CAACJ,QAAD,CAAb;AACD,KAFD;AAGH,GAbQ,CAAT;;AAeA,MAAMK,GAAG,GAAG,SAANA,GAAM,GAAI;AACd,QAAGR,SAAS,IAAI,KAAhB,EAAsB;AACpBC,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,KAFD,MAEK;AACHA,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAND;;AAQA,MAAMQ,SAAS,GAAE,SAAXA,SAAW,GAAI;AACnB,QAAGjB,UAAU,IAAG,EAAhB,EAAmB;AACjB,aAAOkB,KAAP;AACD,KAFD,MAEM,IAAIhB,WAAW,IAAI,EAAnB,EAAsB;AAC1B,aAAO,KAAP;AACD,KAFK,MAEA,IAAGE,WAAW,IAAI,EAAlB,EAAqB;AACzB,aAAO,KAAP;AACD,KAFK,MAEA,IAAGR,IAAI,IAAI,EAAX,EAAc;AAClB,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD,GAZD;;AAcA,MAAMuB,IAAI,GAAE,SAANA,IAAM,GAAI;AACd,QAAGF,SAAS,EAAZ,EAAe;AACbP,MAAAA,QAAQ,CAACU,QAAT,CAAkBC,MAAM,CAACrB,UAAD,CAAxB,EAAsCqB,MAAM,CAACnB,WAAD,CAA5C,EAA2DmB,MAAM,CAACjB,WAAD,CAAjE;AACAkB,MAAAA,OAAO,CAACC,GAAR,CAAY,CAACvB,UAAb;AACAsB,MAAAA,OAAO,CAACC,GAAR,CAAY,CAACrB,WAAb;AACAoB,MAAAA,OAAO,CAACC,GAAR,CAAY,CAACnB,WAAb;AACAK,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACF;AACD,GARD;;AAUA,MAAMe,WAAW,GAAG,SAAdA,WAAc,GAAI;AACtB,QAAIpC,WAAW,IAAI,OAAnB,EAA4B;AAC1BC,MAAAA,cAAc,CAAC,KAAD,CAAd;AACAU,MAAAA,QAAQ,CAACW,QAAQ,CAACG,kBAAT,CAA4B,OAA5B,CAAD,CAAR;AACD,KAHD,MAGO;AACLxB,MAAAA,cAAc,CAAC,OAAD,CAAd;AACAU,MAAAA,QAAQ,CAACW,QAAQ,CAACG,kBAAT,CAA4B,OAA5B,CAAD,CAAR;AACD;AACF,GARD;;AAUA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEY,MAAM,CAACC,SAApB;AAAA,eAEE,KAAC,gBAAD;AAAkB,MAAA,KAAK,EAAE5B,KAAzB;AAAgC,MAAA,IAAI,EAAEF;AAAtC,MAFF,EAIGR,WAAW,IAAI,OAAf,IAA2B,MAAC,UAAD;AAAA,iBACxB,KAAC,WAAD;AAAa,QAAA,KAAK,EAAC,KAAnB;AAA0B,QAAA,UAAU,EAAC,SAArC;AAA+C,QAAA,QAAQ,EAAC,IAAxD;AAA6D,QAAA,OAAO,EAAE4B;AAAtE,QADwB,EAExB,KAAC,WAAD;AAAa,QAAA,KAAK,EAAC,OAAnB;AAA4B,QAAA,UAAU,EAAC,SAAvC;AAAiD,QAAA,QAAQ,EAAC,IAA1D;AAAgE,QAAA,OAAO,EAAEQ;AAAzE,QAFwB;AAAA,MAJ9B,EAUGpC,WAAW,IAAI,KAAf,IAAyB,MAAC,UAAD;AAAA,iBACtB,KAAC,WAAD;AAAa,QAAA,KAAK,EAAC,KAAnB;AAA0B,QAAA,UAAU,EAAC,SAArC;AAAgD,QAAA,QAAQ,EAAC,IAAzD;AAA8D,QAAA,OAAO,EAAE4B;AAAvE,QADsB,EAEtB,KAAC,WAAD;AAAa,QAAA,KAAK,EAAC,KAAnB;AAA0B,QAAA,UAAU,EAAC,SAArC;AAA+C,QAAA,QAAQ,EAAC,IAAxD;AAA8D,QAAA,OAAO,EAAEQ;AAAvE,QAFsB;AAAA,MAV5B,EAgBE,KAAC,KAAD;AAAO,MAAA,OAAO,EAAEhB,SAAhB;AAA2B,MAAA,aAAa,EAAG,OAA3C;AAAoD,MAAA,KAAK,EAAEiB,MAAM,CAACE,KAAlE;AAAyE,MAAA,WAAW,EAAE,IAAtF;AAAA,gBACE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAEF,MAAM,CAACG,MAApB;AAAA,mBACI,KAAC,SAAD;AAAW,UAAA,KAAK,EAAEH,MAAM,CAAC3B,KAAzB;AAAgC,UAAA,YAAY,EAAEG,aAA9C;AAA6D,UAAA,WAAW,EAAC,IAAzE;AAA8E,UAAA,YAAY,EAAC;AAA3F,UADJ,EAEI,KAAC,SAAD;AAAW,UAAA,KAAK,EAAEwB,MAAM,CAAC3B,KAAzB;AAAgC,UAAA,YAAY,EAAEK,cAA9C;AAA8D,UAAA,WAAW,EAAC,IAA1E;AAA+E,UAAA,YAAY,EAAC;AAA5F,UAFJ,EAGI,KAAC,SAAD;AAAW,UAAA,KAAK,EAAEsB,MAAM,CAAC3B,KAAzB;AAAgC,UAAA,YAAY,EAAEO,cAA9C;AAA8D,UAAA,WAAW,EAAC,IAA1E;AAA+E,UAAA,YAAY,EAAC;AAA5F,UAHJ,EAII,KAAC,SAAD;AAAY,UAAA,QAAQ,EAAEE,YAAtB;AAAoC,UAAA,WAAW,EAAC;AAAhD,UAJJ,EAKI,KAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,MAAd;AAAqB,UAAA,OAAO,EAAEY;AAA9B,UALJ;AAAA;AADF,MAhBF;AAAA,IADF;AA8BH,CAxGA;;AA0GD,IAAMM,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC7BJ,EAAAA,SAAS,EAAE;AACPK,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,eAAe,EAAE,OAFV;AAGPC,IAAAA,UAAU,EAAE,QAHL;AAIPC,IAAAA,UAAU,EAAE,GAJL;AAKPC,IAAAA,iBAAiB,EAAC;AALX,GADkB;AAQ3BR,EAAAA,KAAK,EAAC;AAEJK,IAAAA,eAAe,EAAC;AAFZ;AARqB,CAAlB,CAAf;AAiBA,eAAe7C,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {  StyleSheet, View, Modal, Button, TextInput} from 'react-native';\r\n\r\nimport ButtonsRow from './components/ButtonsRow'\r\nimport ButtonClick from './components/ButtonClick'\r\nimport DisplayDateClock from './components/DisplayDateClock'\r\n\r\n\r\n  let hour = new Date().getHours();\r\n  let minutes = new Date().getMinutes();\r\n  let seconds = new Date().getSeconds();\r\n  let am_pm = 'pm';\r\n\r\nconst getCurrentTime = () => {\r\n  if (minutes < 10) {\r\n    minutes = '0' + minutes;\r\n  }\r\n  if (seconds < 10) {\r\n    seconds = '0' + seconds;\r\n  }\r\n  if (hour > 12) {\r\n    hour = hour - 12;\r\n  }\r\n  if (hour == 0) {\r\n    hour = 12;\r\n  }\r\n  if (new Date().getHours() < 12) {\r\n    am_pm = 'am';\r\n  }\r\n}\r\n\r\n const AppWatch = ()=> {\r\n    const [fotmetWatch,setfotmetWatch]= useState('AM/PM')\r\n    const [hh,sethhclock] = useState()\r\n    const [mm,setmmclock] = useState()\r\n    const [ss,setssclock] = useState()\r\n    const [date,setdate] = useState()\r\n    const[clock,setclock]=useState()\r\n\r\n    const [hoursValue,sethoursValue]= useState('')\r\n    const [minuteValue,setminuteValue]= useState('')\r\n    const [secondValue,setsecondValue]= useState('')\r\n    const [dateValue,setDateValue]= useState('')\r\n\r\n    const [modalOpen,setmodalOpen]=useState(false)\r\n\r\n    const clockNow=new Date('1995-12-17T03:24:00')\r\n\r\n    useEffect(()=>{\r\n        const interval =setInterval(()=>{\r\n          getCurrentTime()\r\n          sethhclock(hour)\r\n          setmmclock(minutes)\r\n          setssclock(seconds)\r\n          setclock(clockNow.toLocaleTimeString())\r\n            setdate(clockNow.toLocaleDateString())\r\n        },1000)\r\n\r\n        return ()=>{\r\n          clearInterval(interval)\r\n        }\r\n    })\r\n\r\n    const set = ()=>{\r\n      if(modalOpen == false){\r\n        setmodalOpen(true)\r\n      }else{\r\n        setmodalOpen(false)\r\n      }\r\n    }\r\n\r\n    const chekValid= ()=>{\r\n      if(hoursValue ==''){\r\n        return flase\r\n      }else if (minuteValue == ''){\r\n        return false\r\n      }else if(secondValue == \"\"){\r\n        return false\r\n      }else if(date == \"\"){\r\n        return false\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    const save= ()=>{\r\n      if(chekValid()){\r\n        clockNow.setHours(Number(hoursValue), Number(minuteValue), Number(secondValue))\r\n        console.log(+hoursValue)\r\n        console.log(+minuteValue)\r\n        console.log(+secondValue)\r\n        setmodalOpen(false)\r\n     }\r\n    }\r\n\r\n    const pormatWatch = ()=>{\r\n      if (fotmetWatch == 'AM/PM') {\r\n        setfotmetWatch('24H')\r\n        setclock(clockNow.toLocaleTimeString('en-US'))\r\n      } else {\r\n        setfotmetWatch('AM/PM')\r\n        setclock(clockNow.toLocaleTimeString('fr-FR'))\r\n      }  \r\n    }\r\n\r\n    return (\r\n      <View style={styles.container}>\r\n\r\n        <DisplayDateClock clock={clock} date={date}></DisplayDateClock>\r\n      \r\n        {fotmetWatch == 'AM/PM' && (<ButtonsRow>\r\n            <ButtonClick title=\"Set\"  background=\"#5F9EA0\" fontSize=\"15\" onPress={set}></ButtonClick>\r\n            <ButtonClick title=\"AM/PM\"  background=\"#5F9EA0\" fontSize=\"10\"  onPress={pormatWatch}></ButtonClick>\r\n        </ButtonsRow>\r\n        )}\r\n\r\n        {fotmetWatch == '24H' && (<ButtonsRow>\r\n            <ButtonClick title=\"Set\"  background=\"#5F9EA0\"  fontSize=\"15\" onPress={set}></ButtonClick>\r\n            <ButtonClick title=\"24H\"  background=\"#B0E0E6\" fontSize=\"10\"  onPress={pormatWatch}></ButtonClick>\r\n        </ButtonsRow>\r\n        )}\r\n\r\n        <Modal visible={modalOpen} animationType ={'slide'} style={styles.modal} transparent={true}>\r\n          <View style={styles.allSet}>\r\n              <TextInput style={styles.clock} onChangeText={sethoursValue} placeholder='HH' keyboardType=\"numeric\"/>\r\n              <TextInput style={styles.clock} onChangeText={setminuteValue} placeholder='MM' keyboardType=\"numeric\"/>\r\n              <TextInput style={styles.clock} onChangeText={setsecondValue} placeholder='SS' keyboardType=\"numeric\"/>\r\n              <TextInput  onChange={setDateValue} placeholder='09/01/2021'/>\r\n              <Button title=\"Save\" onPress={save}></Button>\r\n          </View>\r\n        </Modal>\r\n    \r\n      </View>\r\n   );\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: 'black',\r\n        alignItems: 'center',\r\n        paddingTop: 100,\r\n        paddingHorizontal:20\r\n      },\r\n      modal:{\r\n       \r\n        backgroundColor:'red',\r\n        \r\n      },\r\n      \r\n    \r\n});\r\n\r\nexport default AppWatch\r\n\r\n"]},"metadata":{},"sourceType":"module"}