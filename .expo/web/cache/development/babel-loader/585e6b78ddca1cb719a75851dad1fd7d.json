{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport moment from \"moment\";\nimport { AsyncStorage } from '@react-native-community/async-storage';\nimport ButtonsRow from \"../utills/components/ButtonsRow\";\nimport ButtonClick from \"../utills/components/ButtonClick\";\nimport DisplayDateClock from \"./components/DisplayDateClock\";\nimport ModalInput from \"../utills/components/ModalInput\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar AppWatch = function AppWatch() {\n  var clockNow = new Date();\n\n  var _useState = useState('24H'),\n      _useState2 = _slicedToArray(_useState, 2),\n      fotmetWatch = _useState2[0],\n      setfotmetWatch = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      clock = _useState4[0],\n      setclock = _useState4[1];\n\n  var _useState5 = useState('en-US'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      clockFormat = _useState6[0],\n      setclockFormat = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      clockOffset = _useState8[0],\n      setclockOffset = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      dateOffset = _useState10[0],\n      setdateOffset = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      modalOpen = _useState12[0],\n      setmodalOpen = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      modalFormat = _useState14[0],\n      setmodalFormat = _useState14[1];\n\n  useEffect(function () {\n    var interval = setInterval(function () {\n      setclock(clockNow.toLocaleTimeString());\n    }, 1000);\n    return function () {\n      clearInterval(interval);\n    };\n  });\n\n  var set = function set() {\n    if (modalOpen == false) {\n      setmodalOpen(true);\n    } else {\n      setmodalOpen(false);\n    }\n  };\n\n  var save = function save(values) {\n    var userTimeInSeconds = parseInt(values.hours) * 60 * 60 + parseInt(values.minute) * 60 + parseInt(values.second);\n    var currTimeInSeconds = clockNow.getHours() * 60 * 60 + clockNow.getMinutes() * 60 + clockNow.getSeconds();\n    console.log(values.date);\n    setclockOffset((userTimeInSeconds - currTimeInSeconds) * 1000);\n    setdateOffset(new Date(values.date).getTime() + userTimeInSeconds * 1000 - clockNow.getTime());\n\n    storeData = function storeData() {\n      return _regeneratorRuntime.async(function storeData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem('clockOffset', clockOffset));\n\n            case 3:\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem('dateOffset', dateOffset));\n\n            case 5:\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log;\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    };\n  };\n\n  var pormatWatch = function pormatWatch() {\n    if (clockFormat == 'fr-FR') {\n      setclockFormat('en-US');\n    } else {\n      setclockFormat('fr-FR');\n    }\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(DisplayDateClock, {\n      clock: new Date(clockNow.getTime() + clockOffset).toLocaleTimeString(clockFormat),\n      date: moment(new Date(new Date().getTime() + dateOffset)).format('DD/MM/YYYY'),\n      fontSize: 45\n    }), fotmetWatch == 'AM/PM' && _jsxs(ButtonsRow, {\n      children: [_jsx(ButtonClick, {\n        title: \"Set\",\n        background: \"#5F9EA0\",\n        onPress: set,\n        fontSize: 22\n      }), _jsx(ButtonClick, {\n        title: \"AM/PM\",\n        background: \"#5F9EA0\",\n        onPress: pormatWatch,\n        fontSize: 15\n      })]\n    }), fotmetWatch == '24H' && _jsxs(ButtonsRow, {\n      children: [_jsx(ButtonClick, {\n        title: \"Set\",\n        background: \"#5F9EA0\",\n        onPress: set,\n        fontSize: 22\n      }), _jsx(ButtonClick, {\n        title: \"24H\",\n        background: \"#B0E0E6\",\n        onPress: pormatWatch,\n        fontSize: 25\n      })]\n    }), _jsx(ModalInput, {\n      modalOpen: modalOpen,\n      set: set,\n      save: save,\n      modalFormat: modalFormat\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'black',\n    alignItems: 'center',\n    paddingTop: 100,\n    paddingHorizontal: 20\n  }\n});\nexport default AppWatch;","map":{"version":3,"sources":["C:/Users/micha/Desktop/react netive/project/watch/AppWatch.jsx"],"names":["React","useState","useEffect","moment","AsyncStorage","ButtonsRow","ButtonClick","DisplayDateClock","ModalInput","AppWatch","clockNow","Date","fotmetWatch","setfotmetWatch","clock","setclock","clockFormat","setclockFormat","clockOffset","setclockOffset","dateOffset","setdateOffset","modalOpen","setmodalOpen","modalFormat","setmodalFormat","interval","setInterval","toLocaleTimeString","clearInterval","set","save","values","userTimeInSeconds","parseInt","hours","minute","second","currTimeInSeconds","getHours","getMinutes","getSeconds","console","log","date","getTime","storeData","setItem","pormatWatch","styles","container","format","StyleSheet","create","flex","backgroundColor","alignItems","paddingTop","paddingHorizontal"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { StyleSheet, View} from 'react-native';\r\nimport moment from \"moment\";\r\nimport { AsyncStorage } from '@react-native-community/async-storage';\r\n\r\nimport ButtonsRow from '../utills/components/ButtonsRow'\r\nimport ButtonClick from '../utills/components/ButtonClick'\r\nimport DisplayDateClock from './components/DisplayDateClock'\r\nimport ModalInput from '../utills/components/ModalInput';\r\n\r\n\r\n const AppWatch = ()=> {\r\n   const clockNow=new Date()\r\n   \r\n    const [fotmetWatch,setfotmetWatch]= useState('24H')\r\n\r\n    const [clock,setclock]=useState()\r\n    const [clockFormat,setclockFormat]=useState('en-US')\r\n    const [clockOffset,setclockOffset]=useState(0)\r\n    const [dateOffset,setdateOffset]=useState(0)\r\n\r\n    // Modal\r\n    const [modalOpen,setmodalOpen]=useState(false)\r\n    const [modalFormat, setmodalFormat] = useState(false)\r\n\r\n    useEffect(()=>{\r\n        const interval =setInterval(()=>{\r\n          setclock(clockNow.toLocaleTimeString())\r\n        },1000)\r\n\r\n        return ()=>{\r\n          clearInterval(interval)\r\n        }\r\n    })\r\n\r\n  // Functions for the buttons\r\n    const set = ()=>{\r\n      if(modalOpen == false){\r\n        setmodalOpen(true)\r\n      }else{\r\n        setmodalOpen(false)\r\n      }\r\n    }\r\n\r\n    const save=(values)=>{\r\n      let userTimeInSeconds = parseInt(values.hours) * 60 * 60 +\r\n         parseInt(values.minute) * 60 +\r\n         parseInt(values.second)\r\n      \r\n      let currTimeInSeconds = \r\n        clockNow.getHours() * 60 * 60 +\r\n        clockNow.getMinutes() * 60 +\r\n        clockNow.getSeconds()\r\n      console.log(values.date)\r\n      setclockOffset((userTimeInSeconds - currTimeInSeconds) * 1000)\r\n      setdateOffset(new Date(values.date).getTime() + userTimeInSeconds * 1000 - clockNow.getTime())\r\n\r\n      storeData = async () => {\r\n        try {\r\n          await AsyncStorage.setItem(\r\n            'clockOffset',\r\n            clockOffset\r\n          );\r\n          await AsyncStorage.setItem(\r\n            'dateOffset',\r\n            dateOffset\r\n          );\r\n        } catch (error) {\r\n          console.log\r\n        }\r\n      };\r\n    }\r\n\r\n    const pormatWatch = ()=>{\r\n      if (clockFormat == 'fr-FR') {\r\n        setclockFormat('en-US')\r\n      } else {\r\n        setclockFormat('fr-FR')\r\n      }  \r\n    }\r\n\r\n    return (\r\n      <View style={styles.container} >\r\n\r\n        <DisplayDateClock \r\n          clock={new Date(clockNow.getTime() + clockOffset).toLocaleTimeString(clockFormat)}\r\n          date={moment(new Date(new Date().getTime() + dateOffset)).format('DD/MM/YYYY')}\r\n          fontSize={45}>\r\n        </DisplayDateClock>\r\n      \r\n        {fotmetWatch == 'AM/PM' && (<ButtonsRow>\r\n            <ButtonClick \r\n              title=\"Set\"  \r\n              background=\"#5F9EA0\"  \r\n              onPress={set} \r\n              fontSize={22}>\r\n            </ButtonClick>\r\n\r\n            <ButtonClick \r\n              title=\"AM/PM\"  \r\n              background=\"#5F9EA0\" \r\n              onPress={pormatWatch} \r\n              fontSize={15}>\r\n            </ButtonClick>\r\n        </ButtonsRow>\r\n        )}\r\n\r\n        {fotmetWatch == '24H' && (<ButtonsRow>\r\n            <ButtonClick \r\n            title=\"Set\"  \r\n            background=\"#5F9EA0\"   \r\n            onPress={set} \r\n            fontSize={22}>\r\n            </ButtonClick>\r\n\r\n            <ButtonClick \r\n            title=\"24H\"  \r\n            background=\"#B0E0E6\" \r\n            onPress={pormatWatch} \r\n            fontSize={25}>\r\n            </ButtonClick>\r\n        </ButtonsRow>\r\n        )}\r\n\r\n        <ModalInput \r\n        modalOpen={modalOpen} \r\n        set={set} save={save} \r\n        modalFormat={modalFormat}\r\n        />\r\n\r\n      </View>\r\n   );\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: 'black',\r\n        alignItems: 'center',\r\n        paddingTop: 100,\r\n        paddingHorizontal:20,\r\n      },\r\n    \r\n});\r\n\r\nexport default AppWatch\r\n"]},"metadata":{},"sourceType":"module"}