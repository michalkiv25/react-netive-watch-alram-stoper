{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ButtonsRow from \"../utills/components/ButtonsRow\";\nimport ButtonClick from \"../utills/components/ButtonClick\";\nimport ModalInput from \"../utills/components/ModalInput\";\nimport TimeAlarm from \"./components/TimeAlarm\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function AppAlarm() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      enable = _useState2[0],\n      setEnable = _useState2[1];\n\n  var _useState3 = useState(\"00\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hoursValue = _useState4[0],\n      sethoursValue = _useState4[1];\n\n  var _useState5 = useState(\"00\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      minutesValue = _useState6[0],\n      setminutesValue = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      modalOpen = _useState8[0],\n      setmodalOpen = _useState8[1];\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      modalFormat = _useState10[0],\n      setmodalFormat = _useState10[1];\n\n  var checkAlarm = function checkAlarm() {\n    var timrCurr = new Date();\n    var hourCurr = timrCurr.getHours();\n    var minutesCurr = timrCurr.getMinutes();\n\n    if (hoursValue == hourCurr && minutesValue == minutesCurr) {\n      console.log('לשים שיפעל הסאונד');\n    }\n\n    console.log(hourCurr, minutesCurr);\n    console.log(hoursValue, minutesValue);\n  };\n\n  useEffect(function () {\n    var interval = setInterval(function () {\n      checkAlarm();\n    }, 1000);\n    return function () {\n      clearInterval(interval);\n    };\n  });\n\n  var set = function set() {\n    if (modalOpen == false) {\n      setmodalOpen(true);\n    } else {\n      setmodalOpen(false);\n    }\n  };\n\n  var Enable = function Enable() {\n    console.log('לשים שיפעל הסאונד');\n    setEnable(true);\n  };\n\n  var Disables = function Disables() {\n    console.log('לשים שיפסק הסאונד');\n    setEnable(false);\n  };\n\n  var save = function save(values) {\n    var hoursNumber = parseInt(values.hours);\n    var minuteNumber = parseInt(values.minute);\n    sethoursValue(hoursNumber);\n    setminutesValue(minuteNumber);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(TimeAlarm, {\n      hoursValue: hoursValue,\n      minutesValue: minutesValue\n    }), enable == false && _jsxs(ButtonsRow, {\n      children: [_jsx(ButtonClick, {\n        title: \"Set\",\n        background: \"#5F9EA0\",\n        onPress: set,\n        fontSize: 22\n      }), _jsx(ButtonClick, {\n        title: \"Enable\",\n        background: \"#5F9EA0\",\n        onPress: Enable,\n        fontSize: 17\n      })]\n    }), enable != false && _jsxs(ButtonsRow, {\n      children: [_jsx(ButtonClick, {\n        title: \"Set\",\n        background: \"#5F9EA0\",\n        onPress: set,\n        fontSize: 22\n      }), _jsx(ButtonClick, {\n        title: \"Disables\",\n        background: \"#5F9EA0\",\n        onPress: Disables,\n        fontSize: 14\n      })]\n    }), _jsx(ModalInput, {\n      modalOpen: modalOpen,\n      set: set,\n      save: save,\n      modalFormat: modalFormat\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'black',\n    alignItems: 'center',\n    paddingTop: 130\n  }\n});","map":{"version":3,"sources":["C:/Users/micha/Desktop/react netive/project/alarm/AppAlarm.js"],"names":["React","useEffect","useState","ButtonsRow","ButtonClick","ModalInput","TimeAlarm","AppAlarm","enable","setEnable","hoursValue","sethoursValue","minutesValue","setminutesValue","modalOpen","setmodalOpen","modalFormat","setmodalFormat","checkAlarm","timrCurr","Date","hourCurr","getHours","minutesCurr","getMinutes","console","log","interval","setInterval","clearInterval","set","Enable","Disables","save","values","hoursNumber","parseInt","hours","minuteNumber","minute","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","paddingTop"],"mappings":"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","sourcesContent":["import React,{ useEffect, useState } from 'react';\r\nimport { StyleSheet, Text,View } from 'react-native';\r\n// var Sound = require('react-native-sound');\r\n\r\n// Import components from the project\r\nimport ButtonsRow from '../utills/components/ButtonsRow';\r\nimport ButtonClick from '../utills/components/ButtonClick';\r\nimport ModalInput from '../utills/components/ModalInput';\r\nimport TimeAlarm from './components/TimeAlarm';\r\n// import AlarmMp3 from '../assets/audio/Alarm.mp3'\r\n\r\n\r\n\r\nexport default function AppAlarm() {\r\n    const [enable,setEnable] = useState(false) //stop && start alarm\r\n    const [hoursValue,sethoursValue] = useState(\"00\")\r\n    const [minutesValue,setminutesValue] = useState(\"00\")\r\n\r\n    // Modal\r\n    const [modalOpen,setmodalOpen] = useState(false)\r\n    const [modalFormat, setmodalFormat] = useState(true)\r\n\r\n   \r\n    const checkAlarm = ()=>{\r\n        let timrCurr= new Date();\r\n        let hourCurr=timrCurr.getHours()\r\n        let minutesCurr= timrCurr.getMinutes()\r\n\r\n        if(hoursValue== hourCurr && minutesValue == minutesCurr){\r\n            console.log('לשים שיפעל הסאונד')\r\n        }\r\n           console.log(hourCurr,minutesCurr)\r\n           console.log(hoursValue,minutesValue)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const interval = setInterval(()=> {\r\n            checkAlarm()\r\n        },1000)\r\n\r\n        return ()=> {\r\n            clearInterval(interval)\r\n        }\r\n    })\r\n\r\n\r\n    // Functions for the buttons\r\n    const set = ()=>{\r\n        if(modalOpen == false){\r\n            setmodalOpen(true)\r\n        }else{\r\n            setmodalOpen(false)\r\n        }\r\n    }\r\n    \r\n    const Enable= ()=>{\r\n        console.log('לשים שיפעל הסאונד')\r\n        setEnable(true)\r\n    }\r\n    \r\n    const Disables= ()=>{\r\n        console.log('לשים שיפסק הסאונד')\r\n        setEnable(false)\r\n    }\r\n    \r\n    // save sate\r\n    const save=(values)=>{\r\n        let hoursNumber = parseInt(values.hours)\r\n        let minuteNumber= parseInt(values.minute)\r\n        sethoursValue(hoursNumber)\r\n        setminutesValue(minuteNumber)\r\n    }\r\n\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n        <TimeAlarm hoursValue={hoursValue} minutesValue={minutesValue}></TimeAlarm>\r\n        \r\n\r\n        {enable == false && (\r\n        <ButtonsRow>\r\n            <ButtonClick title=\"Set\"  background=\"#5F9EA0\" onPress={set} fontSize={22}></ButtonClick>\r\n            <ButtonClick title=\"Enable\"  background=\"#5F9EA0\" onPress={Enable} fontSize={17}></ButtonClick>\r\n        </ButtonsRow>\r\n        )}\r\n\r\n        {enable != false && (\r\n        <ButtonsRow>\r\n            <ButtonClick title=\"Set\"  background=\"#5F9EA0\" onPress={set} fontSize={22}></ButtonClick>\r\n            <ButtonClick title=\"Disables\"  background=\"#5F9EA0\" onPress={Disables} fontSize={14}></ButtonClick>\r\n        </ButtonsRow>\r\n        )}\r\n\r\n        <ModalInput modalOpen={modalOpen} set={set} save={save} modalFormat={modalFormat}/>\r\n\r\n        \r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: 'black',\r\n        alignItems: 'center',\r\n        paddingTop: 130,\r\n      },\r\n  \r\n});"]},"metadata":{},"sourceType":"module"}