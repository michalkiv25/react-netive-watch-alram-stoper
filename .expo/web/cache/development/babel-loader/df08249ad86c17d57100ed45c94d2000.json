{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this;\n\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Timer from \"./components/Timer\";\nimport RoundButton from \"./components/RoundButton\";\nimport ButtonsRow from \"./components/ButtonsRow\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar AppWatch = function AppWatch() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      startTime = _useState2[0],\n      setStartTime = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currTime = _useState4[0],\n      setCurrTime = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      lastLap = _useState6[0],\n      setlastLap = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      timer = _useState8[0],\n      setTimer = _useState8[1];\n\n  var start = function start() {\n    var time = new Date().getTime();\n    setStartTime(time);\n    setCurrTime(time);\n    setTimer(setInterval(function () {\n      setCurrTime(new Date().getTime());\n    }, 100));\n  };\n\n  var stop = function stop() {\n    clearInterval(timer);\n    setlastLap(lastLap + currTime - startTime);\n    setStartTime(0);\n    setCurrTime(0);\n  };\n\n  var reset = function reset() {\n    setStartTime(0);\n    setCurrTime(0);\n    setlastLap(0);\n  };\n\n  var resume = function resume() {\n    var time = new Data().getTime();\n    setStartTime(time);\n    setCurrTime(time);\n    setTimer(setInterval(function () {\n      setCurrTime(new Date().getTime());\n    }, 100));\n    return _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(Timer, {\n        interval: lastLap + currTime - startTime,\n        style: styles.timer\n      }), lastLap, lastLap == 0 && _jsxs(ButtonsRow, {\n        children: [_jsx(RoundButton, {\n          title: \"Start\",\n          color: \"green\",\n          background: \"red\",\n          onPress: _this.start\n        }), _jsx(RoundButton, {\n          title: \"Rest\",\n          color: \"green\",\n          background: \"red\",\n          onPress: _this.reset\n        })]\n      }), startTime > 0 && _jsxs(ButtonsRow, {\n        children: [_jsx(RoundButton, {\n          title: \"Stop\",\n          color: \"pink\",\n          background: \"blue\",\n          onPress: _this.stop\n        }), _jsx(RoundButton, {\n          title: \"Rest\",\n          color: \"green\",\n          background: \"red\",\n          onPress: _this.reset\n        })]\n      })]\n    });\n  };\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'black',\n    alignItems: 'center',\n    paddingTop: 130,\n    paddingHorizontal: 20\n  },\n  timer: {\n    color: 'white',\n    fontSize: 76,\n    fontWeight: '200',\n    width: 120\n  }\n});\nexport default AppWatch;","map":{"version":3,"sources":["C:/Users/micha/Desktop/react netive/project/stopper/appStopWatch.jsx"],"names":["React","useState","Timer","RoundButton","ButtonsRow","AppWatch","startTime","setStartTime","currTime","setCurrTime","lastLap","setlastLap","timer","setTimer","start","time","Date","getTime","setInterval","stop","clearInterval","reset","resume","Data","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","paddingTop","paddingHorizontal","color","fontSize","fontWeight","width"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { StyleSheet, View } from 'react-native';\r\nimport Timer from './components/Timer'\r\nimport RoundButton from './components/RoundButton'\r\nimport ButtonsRow from './components/ButtonsRow'\r\n\r\n\r\nconst AppWatch= ()=>{\r\nconst [startTime, setStartTime]= useState(0)\r\nconst [currTime, setCurrTime]= useState(0)\r\nconst [lastLap, setlastLap]= useState(0)\r\nconst [timer, setTimer]= useState(0)\r\n\r\nconst start = ()=>{\r\n  const time = new Date().getTime()\r\n  setStartTime(time)\r\n  setCurrTime(time)\r\n\r\n  setTimer(\r\n    setInterval(()=>{\r\n      setCurrTime(new Date().getTime())\r\n    },100)\r\n  ) \r\n}\r\n\r\nconst stop = ()=>{\r\n  clearInterval(timer)\r\n  setlastLap(lastLap + currTime - startTime)\r\n  setStartTime(0)\r\n  setCurrTime(0)\r\n}\r\n\r\nconst reset = ()=>{\r\n  setStartTime(0)\r\n  setCurrTime(0)\r\n  setlastLap(0)\r\n}\r\n\r\nconst resume = ()=>{\r\n  const time= new Data().getTime();\r\n  setStartTime(time)\r\n  setCurrTime(time)\r\n  setTimer(\r\n    setInterval(()=>{\r\n      setCurrTime(new Date().getTime())\r\n    },100)\r\n  )\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Timer interval={lastLap + currTime - startTime} style={styles.timer} ></Timer>\r\n      {lastLap}\r\n\r\n      {lastLap == 0 && (\r\n        <ButtonsRow>\r\n        <RoundButton title=\"Start\" color=\"green\" background=\"red\" onPress={this.start}></RoundButton>\r\n        <RoundButton title=\"Rest\" color=\"green\" background=\"red\" onPress={this.reset}></RoundButton>\r\n\r\n      </ButtonsRow>\r\n      )}\r\n      {startTime > 0 && (\r\n      <ButtonsRow>\r\n        <RoundButton title=\"Stop\" color=\"pink\" background=\"blue\"  onPress={this.stop}></RoundButton>\r\n        <RoundButton title=\"Rest\" color=\"green\" background=\"red\" onPress={this.reset}></RoundButton>\r\n      </ButtonsRow>\r\n      )}\r\n\r\n    </View>\r\n );\r\n}\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: 'black',\r\n    alignItems: 'center',\r\n    paddingTop: 130,\r\n    paddingHorizontal:20\r\n  },\r\n  timer:{\r\n    color:'white',\r\n    fontSize: 76,\r\n    fontWeight:'200',\r\n    width: 120,\r\n  },\r\n});\r\n\r\nexport default AppWatch\r\n"]},"metadata":{},"sourceType":"module"}