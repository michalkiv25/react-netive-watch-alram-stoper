{"ast":null,"code":"import StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar schema = yup.object({\n  hours: yup.number().required(\"Must insert hours\").test(\"is hours valid\", \"Must be between 0 - 24\", function (val) {\n    return parseInt(val) >= 0 && parseInt(val) < 24;\n  }),\n  minute: yup.number().required(\"Must insert minutes\").test(\"is minutes valid\", \"Must be between 0 - 60\", function (val) {\n    return parseInt(val) >= 0 && parseInt(val) < 60;\n  }),\n  second: yup.number().required(\"Must insert seconds\").test(\"is seconds valid\", \"Must be between 0 - 60\", function (val) {\n    return parseInt(val) >= 0 && parseInt(val) < 60;\n  }),\n  date: yup.date().required(\"Must insert date\")\n});\n\nfunction ReviewForm() {\n  return _jsx(View, {\n    children: _jsx(Formik, {\n      validationSchema: schema,\n      initialValues: {\n        hours: \"\",\n        minute: \"\",\n        second: \"\",\n        date: \"\"\n      },\n      onSubmit: function onSubmit(values, actions) {\n        actions.resetForm();\n        save(values);\n        console.log(values);\n      },\n      children: function children(props) {\n        return _jsxs(View, {\n          children: [_jsxs(View, {\n            style: styles.inputRow,\n            children: [_jsx(Text, {\n              children: \"Time\"\n            }), _jsx(TextInput, {\n              style: styles.inputWatch,\n              onChangeText: props.handleChange('hours'),\n              placeholder: \"HH\",\n              keyboardType: \"numeric\",\n              value: props.values.hours,\n              onBlur: props.handleBlur('hours')\n            }), _jsx(Text, {\n              children: props.touched.hours && props.errors.hours\n            }), _jsx(TextInput, {\n              style: styles.inputWatch,\n              onChangeText: props.handleChange('minute'),\n              placeholder: \"MM\",\n              keyboardType: \"numeric\",\n              value: props.values.minute,\n              onBlur: props.handleBlur('minute')\n            }), _jsx(Text, {\n              children: props.touched.minute && props.errors.minute\n            }), _jsx(TextInput, {\n              style: styles.inputWatch,\n              onChangeText: props.handleChange('second'),\n              placeholder: \"SS\",\n              keyboardType: \"numeric\",\n              value: props.values.second,\n              onBlur: props.handleBlur('second')\n            }), _jsx(Text, {\n              children: props.touched.second && props.errors.second\n            })]\n          }), _jsxs(View, {\n            style: styles.inputRow,\n            children: [_jsx(Text, {\n              children: \"Date\"\n            }), _jsx(TextInput, {\n              style: styles.inputDate,\n              onChange: props.handleChange('date'),\n              placeholder: \"09/01/2021\",\n              value: props.values.date,\n              onBlur: props.handleBlur('date')\n            }), _jsx(Text, {\n              style: styles.errors,\n              children: props.touched.date && props.errors.date\n            })]\n          }), _jsx(Button, {\n            style: styles.save,\n            title: \"Save\",\n            onPress: props.handleSubmit\n          })]\n        });\n      }\n    })\n  });\n}\n\nvar styles = StyleSheet.create({\n  inputRow: {\n    flexDirection: \"row\",\n    marginTop: 5\n  },\n  inputWatch: {\n    width: 35,\n    padding: 3,\n    marginLeft: 3,\n    borderWidth: 2,\n    borderColor: 'black'\n  },\n  inputDate: {\n    width: 100,\n    height: 35,\n    borderBottomColor: 'black',\n    borderBottomStartRadius: 2,\n    borderBottomWidth: 2,\n    marginLeft: 3,\n    padding: 10\n  },\n  save: {\n    marginVertical: 10,\n    backgroundColor: \"red\"\n  },\n  errors: {\n    fontSize: 10,\n    color: 'black',\n    fontWeight: fontWeight\n  }\n});\nexport default ReviewForm;","map":{"version":3,"sources":["C:/Users/micha/Desktop/react netive/project/watch/components/ReviewForm.jsx"],"names":["Formik","yup","schema","object","hours","number","required","test","val","parseInt","minute","second","date","ReviewForm","values","actions","resetForm","save","console","log","props","styles","inputRow","inputWatch","handleChange","handleBlur","touched","errors","inputDate","handleSubmit","StyleSheet","create","flexDirection","marginTop","width","padding","marginLeft","borderWidth","borderColor","height","borderBottomColor","borderBottomStartRadius","borderBottomWidth","marginVertical","backgroundColor","fontSize","color","fontWeight"],"mappings":"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","sourcesContent":["import {  StyleSheet, View, TextInput ,Text,Button  } from 'react-native';\r\nimport { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\nconst schema= yup.object({\r\n  hours: yup.number().required(\"Must insert hours\")\r\n    .test(\"is hours valid\", \"Must be between 0 - 24\", (val) => (parseInt(val) >= 0 && parseInt(val) < 24)),\r\n  minute: yup.number().required(\"Must insert minutes\")\r\n  .test(\"is minutes valid\", \"Must be between 0 - 60\", (val) => (parseInt(val) >= 0 && parseInt(val) < 60)),\r\n  second: yup.number().required(\"Must insert seconds\")\r\n  .test(\"is seconds valid\", \"Must be between 0 - 60\", (val) => (parseInt(val) >= 0 && parseInt(val) < 60)),\r\n  date: yup.date().required(\"Must insert date\"),\r\n})\r\n\r\nfunction ReviewForm(){\r\n  return(\r\n    <View>\r\n    <Formik \r\n    validationSchema={schema}\r\n      initialValues={{hours: \"\",minute:\"\",second:\"\", date:\"\" }} \r\n      onSubmit={(values,actions)=>{\r\n        actions.resetForm();\r\n        save(values)\r\n        console.log(values)}}>\r\n        {(props)=>(\r\n          <View>\r\n            <View style={styles.inputRow}>\r\n              <Text>Time</Text>\r\n              <TextInput \r\n                style={styles.inputWatch} \r\n                onChangeText={props.handleChange('hours')} \r\n                placeholder='HH' \r\n                keyboardType=\"numeric\" \r\n                value={props.values.hours}\r\n                onBlur={props.handleBlur('hours')}\r\n              />\r\n              <Text>{ props.touched.hours && props.errors.hours}</Text>\r\n              <TextInput \r\n              style={styles.inputWatch} \r\n              onChangeText={props.handleChange('minute')} \r\n              placeholder='MM' \r\n              keyboardType=\"numeric\" \r\n              value={props.values.minute}\r\n              onBlur={props.handleBlur('minute')}\r\n              />\r\n              <Text>{ props.touched.minute && props.errors.minute}</Text>\r\n              <TextInput \r\n              style={styles.inputWatch} \r\n              onChangeText={props.handleChange('second')} \r\n              placeholder='SS' \r\n              keyboardType=\"numeric\" \r\n              value={props.values.second}\r\n              onBlur={props.handleBlur('second')}\r\n              />\r\n              <Text>{props.touched.second && props.errors.second}</Text>\r\n              </View>\r\n\r\n              <View style={styles.inputRow}>   \r\n              <Text>Date</Text>\r\n              <TextInput \r\n              style={styles.inputDate}  \r\n              onChange={props.handleChange('date')} \r\n              placeholder='09/01/2021' \r\n              value={props.values.date}\r\n              onBlur={props.handleBlur('date')}\r\n              />\r\n              <Text style={styles.errors}>{ props.touched.date && props.errors.date}</Text>\r\n              </View>\r\n              <Button \r\n              style={styles.save} \r\n              title=\"Save\" \r\n              onPress={props.handleSubmit} ></Button>\r\n          </View>\r\n        )}\r\n   \r\n\r\n        </Formik>\r\n   </View>\r\n\r\n\r\n    \r\n    \r\n  )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  inputRow:{\r\n    flexDirection:\"row\",\r\n    marginTop:5\r\n    \r\n  },\r\n  inputWatch:{\r\n    width: 35,\r\n    padding: 3,\r\n    marginLeft:3,\r\n    borderWidth:2,\r\n    borderColor:'black',\r\n  },\r\n  inputDate:{\r\n    width: 100,\r\n    height: 35,\r\n    borderBottomColor:'black',\r\n    borderBottomStartRadius:2,\r\n    borderBottomWidth:2,\r\n    marginLeft:3,\r\n    padding: 10,\r\n  },\r\n  save:{\r\n    marginVertical:10,\r\n    backgroundColor: \"red\",\r\n  },\r\n  errors:{\r\n    fontSize:10,\r\n    color: 'black',\r\n    fontWeight\r\n  }\r\n});\r\n\r\n\r\nexport default ReviewForm;"]},"metadata":{},"sourceType":"module"}