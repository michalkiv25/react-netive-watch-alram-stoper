{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ModalInput from \"./components/ModalInput\";\nimport moment from \"moment\";\nimport ButtonsRow from \"./components/ButtonsRow\";\nimport ButtonClick from \"./components/ButtonClick\";\nimport DisplayDateClock from \"./components/DisplayDateClock\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar hour = new Date().getHours();\nvar minutes = new Date().getMinutes();\nvar seconds = new Date().getSeconds();\nvar am_pm = 'pm';\n\nvar getCurrentTime = function getCurrentTime() {\n  if (minutes < 10) {\n    minutes = '0' + minutes;\n  }\n\n  if (seconds < 10) {\n    seconds = '0' + seconds;\n  }\n\n  if (hour > 12) {\n    hour = hour - 12;\n  }\n\n  if (hour == 0) {\n    hour = 12;\n  }\n\n  if (new Date().getHours() < 12) {\n    am_pm = 'am';\n  }\n};\n\nvar AppWatch = function AppWatch() {\n  var _useState = useState('AM/PM'),\n      _useState2 = _slicedToArray(_useState, 2),\n      fotmetWatch = _useState2[0],\n      setfotmetWatch = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hh = _useState4[0],\n      sethhclock = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      mm = _useState6[0],\n      setmmclock = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      ss = _useState8[0],\n      setssclock = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      date = _useState10[0],\n      setdate = _useState10[1];\n\n  var _useState11 = useState(),\n      _useState12 = _slicedToArray(_useState11, 2),\n      clock = _useState12[0],\n      setclock = _useState12[1];\n\n  var _useState13 = useState('fr-FR'),\n      _useState14 = _slicedToArray(_useState13, 2),\n      clockFormat = _useState14[0],\n      setclockFormat = _useState14[1];\n\n  var _useState15 = useState(0),\n      _useState16 = _slicedToArray(_useState15, 2),\n      clockOffset = _useState16[0],\n      setclockOffset = _useState16[1];\n\n  var _useState17 = useState(''),\n      _useState18 = _slicedToArray(_useState17, 2),\n      hoursValue = _useState18[0],\n      sethoursValue = _useState18[1];\n\n  var _useState19 = useState(''),\n      _useState20 = _slicedToArray(_useState19, 2),\n      minuteValue = _useState20[0],\n      setminuteValue = _useState20[1];\n\n  var _useState21 = useState(''),\n      _useState22 = _slicedToArray(_useState21, 2),\n      secondValue = _useState22[0],\n      setsecondValue = _useState22[1];\n\n  var _useState23 = useState(''),\n      _useState24 = _slicedToArray(_useState23, 2),\n      dateValue = _useState24[0],\n      setDateValue = _useState24[1];\n\n  var _useState25 = useState(false),\n      _useState26 = _slicedToArray(_useState25, 2),\n      modalOpen = _useState26[0],\n      setmodalOpen = _useState26[1];\n\n  var clockNow = new Date();\n  useEffect(function () {\n    var interval = setInterval(function () {\n      getCurrentTime();\n      sethhclock(hour);\n      setmmclock(minutes);\n      setssclock(seconds);\n      setclock(clockNow.toLocaleTimeString());\n      setdate(moment(new Date()).format(\"DD/MM/YYYY\"));\n    }, 1000);\n    return function () {\n      clearInterval(interval);\n    };\n  });\n\n  var set = function set() {\n    if (modalOpen == false) {\n      setmodalOpen(true);\n    } else {\n      setmodalOpen(false);\n    }\n  };\n\n  var save = function save(values) {\n    console.log(values.hours);\n    moment(clockNow).startOf('12:12:12');\n    var user;\n    setclockOffset(parseInt(values.hours) * 60 * 60 + parseInt(values.minutes) * 60 + parseInt(values.seconds));\n    sethhclock();\n    setminuteValue();\n    setsecondValue();\n    setDateValue();\n    setmodalOpen(false);\n  };\n\n  var pormatWatch = function pormatWatch() {\n    if (clockFormat == 'fr-FR') {\n      setclockFormat('en-US');\n    } else {\n      setclockFormat('fr-FR');\n    }\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(DisplayDateClock, {\n      clock: clockNow.toLocaleTimeString(clockFormat),\n      date: date\n    }), fotmetWatch == 'AM/PM' && _jsxs(ButtonsRow, {\n      children: [_jsx(ButtonClick, {\n        title: \"Set\",\n        background: \"#5F9EA0\",\n        onPress: set\n      }), _jsx(ButtonClick, {\n        title: \"AM/PM\",\n        background: \"#5F9EA0\",\n        onPress: pormatWatch\n      })]\n    }), fotmetWatch == '24H' && _jsxs(ButtonsRow, {\n      children: [_jsx(ButtonClick, {\n        title: \"Set\",\n        background: \"#5F9EA0\",\n        onPress: set\n      }), _jsx(ButtonClick, {\n        title: \"24H\",\n        background: \"#B0E0E6\",\n        onPress: pormatWatch\n      })]\n    }), _jsx(ModalInput, {\n      modalOpen: modalOpen,\n      set: set,\n      save: save\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'black',\n    alignItems: 'center',\n    paddingTop: 100,\n    paddingHorizontal: 20\n  }\n});\nexport default AppWatch;","map":{"version":3,"sources":["C:/Users/micha/Desktop/react netive/project/watch/AppWatch.jsx"],"names":["React","useState","useEffect","ModalInput","moment","ButtonsRow","ButtonClick","DisplayDateClock","hour","Date","getHours","minutes","getMinutes","seconds","getSeconds","am_pm","getCurrentTime","AppWatch","fotmetWatch","setfotmetWatch","hh","sethhclock","mm","setmmclock","ss","setssclock","date","setdate","clock","setclock","clockFormat","setclockFormat","clockOffset","setclockOffset","hoursValue","sethoursValue","minuteValue","setminuteValue","secondValue","setsecondValue","dateValue","setDateValue","modalOpen","setmodalOpen","clockNow","interval","setInterval","toLocaleTimeString","format","clearInterval","set","save","values","console","log","hours","startOf","user","parseInt","pormatWatch","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","paddingTop","paddingHorizontal"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {  StyleSheet, View} from 'react-native';\r\nimport ModalInput from './components/ModalInput';\r\nimport moment from \"moment\";\r\n\r\nimport ButtonsRow from './components/ButtonsRow'\r\nimport ButtonClick from './components/ButtonClick'\r\nimport DisplayDateClock from './components/DisplayDateClock'\r\n\r\n  let hour = new Date().getHours();\r\n  let minutes = new Date().getMinutes();\r\n  let seconds = new Date().getSeconds();\r\n  let am_pm = 'pm';\r\n\r\nconst getCurrentTime = () => {\r\n  if (minutes < 10) {\r\n    minutes = '0' + minutes;\r\n  }\r\n  if (seconds < 10) {\r\n    seconds = '0' + seconds;\r\n  }\r\n  if (hour > 12) {\r\n    hour = hour - 12;\r\n  }\r\n  if (hour == 0) {\r\n    hour = 12;\r\n  }\r\n  if (new Date().getHours() < 12) {\r\n    am_pm = 'am';\r\n  }\r\n}\r\n\r\n const AppWatch = ()=> {\r\n    const [fotmetWatch,setfotmetWatch]= useState('AM/PM')\r\n    const [hh,sethhclock] = useState()\r\n    const [mm,setmmclock] = useState()\r\n    const [ss,setssclock] = useState()\r\n    const [date,setdate] = useState()\r\n    const [clock,setclock]=useState()\r\n    const [clockFormat,setclockFormat]=useState('fr-FR')\r\n    const [clockOffset,setclockOffset]=useState(0)\r\n\r\n    const [hoursValue,sethoursValue]= useState('')\r\n    const [minuteValue,setminuteValue]= useState('')\r\n    const [secondValue,setsecondValue]= useState('')\r\n    const [dateValue,setDateValue]= useState('')\r\n\r\n    const [modalOpen,setmodalOpen]=useState(false)\r\n\r\n    const clockNow=new Date()\r\n\r\n    useEffect(()=>{\r\n        const interval =setInterval(()=>{\r\n          getCurrentTime()\r\n          sethhclock(hour)\r\n          setmmclock(minutes)\r\n          setssclock(seconds)\r\n          setclock(clockNow.toLocaleTimeString())\r\n          setdate(moment(new Date()).format(\"DD/MM/YYYY\"))\r\n        },1000)\r\n\r\n        return ()=>{\r\n          clearInterval(interval)\r\n        }\r\n    })\r\n\r\n    const set = ()=>{\r\n      if(modalOpen == false){\r\n        setmodalOpen(true)\r\n      }else{\r\n        setmodalOpen(false)\r\n      }\r\n    }\r\n\r\n    const save=(values)=>{\r\n      console.log(values.hours)\r\n      moment(clockNow).startOf('12:12:12')\r\n      let user\r\n      setclockOffset(parseInt(values.hours) * 60 * 60 + parseInt(values.minutes) * 60 + parseInt(values.seconds))\r\n      sethhclock()\r\n      setminuteValue()\r\n      setsecondValue()\r\n      setDateValue()\r\n      setmodalOpen(false)\r\n    }\r\n\r\n    const pormatWatch = ()=>{\r\n      if (clockFormat == 'fr-FR') {\r\n        setclockFormat('en-US')\r\n      } else {\r\n        setclockFormat('fr-FR')\r\n      }  \r\n    }\r\n\r\n    return (\r\n      <View style={styles.container} >\r\n        <DisplayDateClock clock={clockNow.toLocaleTimeString(clockFormat)} date={date}></DisplayDateClock>\r\n      \r\n        {fotmetWatch == 'AM/PM' && (<ButtonsRow>\r\n            <ButtonClick title=\"Set\"  background=\"#5F9EA0\"  onPress={set}></ButtonClick>\r\n            <ButtonClick title=\"AM/PM\"  background=\"#5F9EA0\" onPress={pormatWatch}></ButtonClick>\r\n        </ButtonsRow>\r\n        )}\r\n\r\n        {fotmetWatch == '24H' && (<ButtonsRow>\r\n            <ButtonClick title=\"Set\"  background=\"#5F9EA0\"   onPress={set}></ButtonClick>\r\n            <ButtonClick title=\"24H\"  background=\"#B0E0E6\" onPress={pormatWatch}></ButtonClick>\r\n        </ButtonsRow>\r\n        )}\r\n\r\n        <ModalInput modalOpen={modalOpen} set={set} save={save}/>\r\n      </View>\r\n   );\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: 'black',\r\n        alignItems: 'center',\r\n        paddingTop: 100,\r\n        paddingHorizontal:20\r\n      }\r\n});\r\n\r\nexport default AppWatch\r\n\r\n"]},"metadata":{},"sourceType":"module"}